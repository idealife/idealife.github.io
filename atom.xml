<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iDealife</title>
  
  <subtitle>Stay hungry, Stay foolish.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://idealife.github.io/"/>
  <updated>2017-09-09T12:44:17.000Z</updated>
  <id>http://idealife.github.io/</id>
  
  <author>
    <name>Dong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NPM包管理中的陷阱</title>
    <link href="http://idealife.github.io/2017/08/24/NPM%E5%8C%85%E7%AE%A1%E7%90%86%E4%B8%AD%E7%9A%84%E9%99%B7%E9%98%B1/"/>
    <id>http://idealife.github.io/2017/08/24/NPM包管理中的陷阱/</id>
    <published>2017-08-24T09:31:14.000Z</published>
    <updated>2017-09-09T12:44:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>随着前端生态不断欣欣向荣的发展，NPM已成为了最大包管理分发平台。<br>但是问题也越来越多，比如一年前的left-pad事件，导致了大量的项目无法正常运行，正因为如此又出现了yarn，准备纠正一些问题。</p><p>最近接手了一个旧的项目，顺利的踩到了NPM中的一个坑，记录这次采坑经历，为今后时时敲响警钟。<br>项目中用到了<a href="https://github.com/dcodeIO/protobuf.js" target="_blank" rel="external">dcodeIO/protobuf.js</a>这个库解析数据，因为用到了json的描述文件，因此采用了<code>light library</code>方式进行使用。<br><a id="more"></a><br>以前这个项目一直很稳定的在使用者，但是我接手后运行，却无法进行正常的pb解析了，我想一定是我的“打开方式”有问题，尝试了N久无果，然后通过控制台的报错信息去定位具体的原因。<br><img src="/img/201708/1-1.png" alt=""><br>断点发现上面获取到的$protobuf对象，竟然是用到了<code>minimal</code>的库，又一遍遍的检查代码，也请教了之前开发的同事，验证了代码的使用上没有问题。</p><p>于是就将怀疑的目标转向到了protobuf.js这个库上了。<br>果然在GitHub上发现了蛛丝马迹。作者在2017年7月11号的时候修正了一个bug,如下<img src="/img/201708/2-1.png" alt=""><br>而之前版本是针对json-module,竟然依赖的是<code>minimal</code>的库，可见作者已经修复了这个问题，但是6月10日发布的6.8.0版本中顺利的带着这个bug发布了，可能是<code>light</code>方式使用的人不多，并没有被及时的发现并纠正。</p><p>我这是一个年初的项目，怎么会用到了最新release的6.8.0版本的依赖呢？</p><p>这个就得从NPM的包管理方式说起了。我们在package.json中的包依赖中经常能见到<code>~</code>和<code>^</code>这两个标记，具体含义可以见这里<a href="https://stackoverflow.com/questions/22343224/whats-the-difference-between-tilde-and-caret-in-package-json" target="_blank" rel="external">二者的区别</a>。</p><p>一般开发阶段，我们安装包都是 <code>npm i xxx -D</code>这种方式，包管理往往会自动帮我们加上<code>^</code>这个标记，比如用到的protobuf.js的版本号是<code>^6.7.3</code>。那么意味着当官方发布6.8.0版本后，我再进行包安装的话，就会给我安装上6.8.0这个带bug的版本，从而引发了一系列不可预知的问题。要绕开上面我遇到的这个问题的话，我们则需要卸载6.8.0版本，然后在package.json中将6.7.3前面的^去掉，强制指定规定的版本。</p><p>理论上来说保持新版本依赖的使用可以帮忙修复原先的问题，但是也会引入新的bug,并不是意味着越新越好，在实际项目中还是追求稳定。因此可以在安装依赖的过程中强制指定版本或者试试新的yarn。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着前端生态不断欣欣向荣的发展，NPM已成为了最大包管理分发平台。&lt;br&gt;但是问题也越来越多，比如一年前的left-pad事件，导致了大量的项目无法正常运行，正因为如此又出现了yarn，准备纠正一些问题。&lt;/p&gt;
&lt;p&gt;最近接手了一个旧的项目，顺利的踩到了NPM中的一个坑，记录这次采坑经历，为今后时时敲响警钟。&lt;br&gt;项目中用到了&lt;a href=&quot;https://github.com/dcodeIO/protobuf.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dcodeIO/protobuf.js&lt;/a&gt;这个库解析数据，因为用到了json的描述文件，因此采用了&lt;code&gt;light library&lt;/code&gt;方式进行使用。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://idealife.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="npm" scheme="http://idealife.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>VS Code中的插件以及相关配置</title>
    <link href="http://idealife.github.io/2017/06/29/VS-Code%E4%B8%AD%E7%9A%84%E6%8F%92%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/"/>
    <id>http://idealife.github.io/2017/06/29/VS-Code中的插件以及相关配置/</id>
    <published>2017-06-29T12:29:02.000Z</published>
    <updated>2017-09-09T12:37:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>VS Code相对其他编辑器，配置相对简单，而且插件也非常丰富，总之是越来越好用了，而且越用越顺手。</p><p>团队开发当然需要统一代码的规范，不然后续的代码比对会让人疯的。<br>这里要主推两个插件：EditorConfig for VS Code 和 ESLint</p><a id="more"></a><h2 id="EditorConfig-for-VS-Code"><a href="#EditorConfig-for-VS-Code" class="headerlink" title="EditorConfig for VS Code"></a>EditorConfig for VS Code</h2><p>EditorConfig 插件会从文件所在目录开始逐级向上查找 .editorconfig，直到到达根目录或者找到包含属性 root=true 的 .editorconfig 文件为止。当找到所有满足条件的 .editorconfig 配置文件后，插件会读取这些配置文件的内容，距离文件路径最短的配置文件中的属性优先级最高，同一个文件按照从上到下方式读取，底部定义的同名属性优先级要高于顶部定义的。大部分编辑器都有这个插件，即使团队成员使用不同的IDE，也可以很好的统一代码风格。只要保证.editorconfig这个文件一直即可。</p><p>相关的配置方式可以见<a href="http://editorconfig.org/" target="_blank" rel="external">官网</a><br><br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attr">root</span> = <span class="literal">true</span></div><div class="line"><span class="section">[*]</span></div><div class="line"><span class="attr">charset</span> = utf-<span class="number">8</span></div><div class="line"><span class="attr">indent_style</span> = space</div><div class="line"><span class="attr">indent_size</span> = <span class="number">2</span></div><div class="line"><span class="attr">end_of_line</span> = lf</div><div class="line"><span class="attr">insert_final_newline</span> = <span class="literal">true</span></div><div class="line"><span class="attr">trim_trailing_whitespace</span> = <span class="literal">true</span></div></pre></td></tr></table></figure></p><h3 id="有坑注意"><a href="#有坑注意" class="headerlink" title="有坑注意:"></a>有坑注意:</h3><p>上述代码配置的是tab为2个空格的缩进。当时当你格式化代码或者按tab还是会出现4个空格的情况，说明还有其他插件也在执行，导致Editorconfig无效。比如<code>Javascript Standard Format</code>等格式化插件，有了Editorconfig后，可以和这类控件暂时告别了。</p><h2 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h2><p>ESLint是一个用来识别 ECMAScript 并且按照规则给出报告的代码检测工具，使用它可以避免低级错误和统一代码的风格.配置的方式有多种，一般这些文件的优先级则是按照以上出现的顺序（.eslintrc.js &gt; .eslintrc.yaml &gt; .eslintrc.yml &gt; .eslintrc.json &gt; .eslintrc &gt; package.json）。</p><p>ESLint的配置方式也是特别丰富，具体教程见<a href="https://eslint.org/" target="_blank" rel="external">官网</a>,目前形成了Airbnb和Standard等相关配置方案，直接选择对应的规则引用使用即可，当然也能在此基础上进行自定义。</p><h3 id="有坑注意-1"><a href="#有坑注意-1" class="headerlink" title="有坑注意:"></a>有坑注意:</h3><p>虽然我们配置好了ESLint，写代码的时候一些不规范的位置都会有错误提示，但是我们格式化代码的配置也需要和ESLint的配置对应，比如下面的情况，代码格式化时会自动删函数名后的空格。<br><img src="/img/201706/2-1.png" alt=""><br>这个时候需要查看VS Code的其他插件的行为，在首选项配置中查<code>insertSpaceBeforeFunctionParenthesis</code> 就能找到是哪个插件在暗中帮我们删的空格。<br><img src="/img/201706/2-1.png" alt=""></p><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><ul><li><p>进行保存时的代码自动格式化。<br>如果发现配置了VS Code首选项中的两个参数， “editor.formatOnType”: false,和”editor.formatOnSave”: false 重启，发现不管用，依然会自动格式化。那么就极有可能是<code>JS-CS-HTML Formatter</code>这个插件捣的鬼。</p></li><li><p>vetur插件提示 ‘v-for’ directives require ‘v-bind:key’ directives<br>原因是vue在升级到2.2后，当在组件中使用 v-for 时， key 现在是必须的。<br>vetur插件的作者给出了解决办法是：<br><code>This is intended ESLint feature. You can turn off eslint check in future release. Setting vetur.validation.vue-html to false will disable it.</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;VS Code相对其他编辑器，配置相对简单，而且插件也非常丰富，总之是越来越好用了，而且越用越顺手。&lt;/p&gt;
&lt;p&gt;团队开发当然需要统一代码的规范，不然后续的代码比对会让人疯的。&lt;br&gt;这里要主推两个插件：EditorConfig for VS Code 和 ESLint&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://idealife.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="VS Code" scheme="http://idealife.github.io/tags/VS-Code/"/>
    
  </entry>
  
  <entry>
    <title>Hexo站点的一些配制总结</title>
    <link href="http://idealife.github.io/2017/06/03/Hexo%E7%AB%99%E7%82%B9%E7%9A%84%E4%B8%80%E4%BA%9B%E9%85%8D%E5%88%B6%E6%80%BB%E7%BB%93/"/>
    <id>http://idealife.github.io/2017/06/03/Hexo站点的一些配制总结/</id>
    <published>2017-06-03T07:54:24.000Z</published>
    <updated>2017-07-16T06:58:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>这段时间重新收拾了一下Github Pages上的博客信息，也更新了新版本的Hexo。<br>为了能更友好的对待搜索引擎,针对性的做了一些优化。</p><p>1、支持Rss订阅</p><p>需要安装hexo-generator-feed插件，hexo generate的时候就会在站点根目录中生成atom.xml，Rss订阅器有了这个xml后就能获取相关的文章内容了。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> npm install hexo-generator-feed</span></div></pre></td></tr></table></figure></p><p>2、支持搜索引擎收录</p><p>安装hexo-generator-sitemap插件，hexo generate的时候会在站点根目录中生成sitemap.xml,这个xml的使用会在下面具体说说使用方式。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> npm install hexo-generator-sitemap</span></div></pre></td></tr></table></figure></p><a id="more"></a><p>3、让Github Pages支持百度搜索引擎的收录</p><p>开始的时候百度是能正常收录的，后来被Github屏蔽了。</p><p>所以找了一个偷懒的办法，就是在coding.net上新建了一个镜像站(coding也提供了Pages的服务)。所以我们只要在部署的时候多部署一次就可以同步了。配置也很方便，如下：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">deploy</span>:</div><div class="line">  <span class="attribute">type</span>: git</div><div class="line">  <span class="attribute">repo</span>:</div><div class="line">    <span class="attribute">github</span>: <span class="attribute">https</span>:<span class="comment">//github.com/idealife/idealife.github.io.git,master</span></div><div class="line">    <span class="attribute">coding</span>: <span class="attribute">https</span>:<span class="comment">//git.coding.net/superdong/superdong.coding.me.git,master</span></div><div class="line">  <span class="attribute">message</span>: update the blog</div></pre></td></tr></table></figure></p><p>这是第一步，我将coding Pages的地址放在了<a href="http://zhanzhang.baidu.com/" target="_blank" rel="external">百度站长</a>平台上管理。添加站点的时候需要验证。采用的是文件验证的方式，将下载的baidu_verify_xxx.html文件放在站点的根目录下即可。</p><p>这里会有个小插曲就是baidu_verify_xxx.html的页面内容本身只是一个验证码，但是Hexo在生成的时候会对所以页面进行模板处理。这样的话就无法通过百度的验证。需要通过配置<code>layout: false</code>屏蔽此页面的模板化。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">layout:</span> <span class="literal">false</span></div><div class="line"><span class="meta">---</span></div><div class="line"><span class="string">e2PybgZtJj</span></div></pre></td></tr></table></figure></p><p>验证通过后，就可以在网页抓取–链接提交中，提交sitemap.xml了，百度就会周期性的抓取检查您提交的sitemap，对其中的链接进行处理。如图:<br><img src="/img/201706/1-1.png" alt="图片"></p><p>Google的话，可以在<a href="https://www.google.com/webmasters" target="_blank" rel="external">Google站长平台</a>中，抓取-站点地图 中 主动提交sitemap.xml的url即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这段时间重新收拾了一下Github Pages上的博客信息，也更新了新版本的Hexo。&lt;br&gt;为了能更友好的对待搜索引擎,针对性的做了一些优化。&lt;/p&gt;
&lt;p&gt;1、支持Rss订阅&lt;/p&gt;
&lt;p&gt;需要安装hexo-generator-feed插件，hexo generate的时候就会在站点根目录中生成atom.xml，Rss订阅器有了这个xml后就能获取相关的文章内容了。&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; npm install hexo-generator-feed&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2、支持搜索引擎收录&lt;/p&gt;
&lt;p&gt;安装hexo-generator-sitemap插件，hexo generate的时候会在站点根目录中生成sitemap.xml,这个xml的使用会在下面具体说说使用方式。&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; npm install hexo-generator-sitemap&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://idealife.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://idealife.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>XP系统中，客户端软件导致系统不能正常访问网络的问题记录</title>
    <link href="http://idealife.github.io/2017/05/20/XP%E7%B3%BB%E7%BB%9F%E4%B8%AD%EF%BC%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BD%AF%E4%BB%B6%E5%AF%BC%E8%87%B4%E7%B3%BB%E7%BB%9F%E4%B8%8D%E8%83%BD%E6%AD%A3%E5%B8%B8%E8%AE%BF%E9%97%AE%E7%BD%91%E7%BB%9C%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://idealife.github.io/2017/05/20/XP系统中，客户端软件导致系统不能正常访问网络的问题记录/</id>
    <published>2017-05-20T07:57:35.000Z</published>
    <updated>2017-09-09T09:24:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近接到了一些用户的反馈，打开我们的客户端软件后，不仅登录不上，而且还会导致浏览器不能正常访问网络。不过这部分用户有一个共同的特征：用的XP系统。虽然XP已经落后这个时代了，但是也不能彻底放弃它，毕竟用户还在上面。</p><p>所以就开始了漫长的问题查找，首先要复现出用户的问题。在XP的虚拟中成功复现了问题，那么查原因就好办多了。</p><a id="more"></a><p>发现用户登录的时候，很多登录时相关的请求都会失败，这才恍然大悟。最近更新了部分服务器，但是DNS解析还会解析到原来的IP地址，导致客户端在登录的断线重连。</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -<span class="built_in">na</span> | <span class="built_in">find</span> <span class="string">"SYS_SEND"</span></div></pre></td></tr></table></figure><p>通过命令发现出现十个SYS_SEND后，后面的请求就不会再继续发送，网络被阻塞住。</p><h3 id="Windows-XP-SP2-has-a-limitation-of-10-outgoing-half-open-TCP-connections-i-e-TCP-connections-in-the-“SYN-SENT”-stage"><a href="#Windows-XP-SP2-has-a-limitation-of-10-outgoing-half-open-TCP-connections-i-e-TCP-connections-in-the-“SYN-SENT”-stage" class="headerlink" title="Windows XP SP2 has a limitation of 10 outgoing half-open TCP connections (i.e.: TCP connections in the “SYN_SENT” stage)"></a>Windows XP SP2 has a limitation of 10 outgoing half-open TCP connections (i.e.: TCP connections in the “SYN_SENT” stage)</h3><p>所以修复DNS的指向就能解决这个问题。</p><p>另外也是有工具可以修改XP中的最大连接数的，这个对于用户而言是有些不友好的，这是那个时代的Geek玩家的玩法。</p><p><code>This is a security feature of XP (SP2 onwards), and a pretty useless one at that. You need to edit the tcpip.sys file. Windws XP SP2 introduces a few new twists to TCP/IP in order to babysit users and &quot;reduce the threat&quot; of worms spreading fast without control. In one such attempt, the devs seem to have limited the number of possible TCP connection attempts per second to 10 (from unlimited in SP1). This argumentative feature can possibly affect server and P2P programs that need to open many outbound connections at the same time. This site provides an automatic (and manual method if you&#39;re worried about the Event ID 4226 Patcher application) for editing the tcpip.sys file. I used the automated (application) many years ago and it worked like a charm</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近接到了一些用户的反馈，打开我们的客户端软件后，不仅登录不上，而且还会导致浏览器不能正常访问网络。不过这部分用户有一个共同的特征：用的XP系统。虽然XP已经落后这个时代了，但是也不能彻底放弃它，毕竟用户还在上面。&lt;/p&gt;
&lt;p&gt;所以就开始了漫长的问题查找，首先要复现出用户的问题。在XP的虚拟中成功复现了问题，那么查原因就好办多了。&lt;/p&gt;
    
    </summary>
    
      <category term="系统" scheme="http://idealife.github.io/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="调试" scheme="http://idealife.github.io/tags/%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>时间组件和日期组件</title>
    <link href="http://idealife.github.io/2017/02/16/%E6%97%B6%E9%97%B4%E7%BB%84%E4%BB%B6%E5%92%8C%E6%97%A5%E6%9C%9F%E7%BB%84%E4%BB%B6/"/>
    <id>http://idealife.github.io/2017/02/16/时间组件和日期组件/</id>
    <published>2017-02-16T10:49:16.000Z</published>
    <updated>2017-09-09T09:13:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>Qt Quick Control 1.x中是没有日期组件和时间组件，好在Qml够灵活，没有的东西可以自己来造。道生一，一生二，二生三，三生万物，瞬间回归到了哲学的本质。</p><h3 id="时间控件"><a href="#时间控件" class="headerlink" title="时间控件"></a>时间控件</h3><p><img src="/img/201702/1-1.png" alt="图片"><br><a id="more"></a><br>代码：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> QtQuick <span class="number">2.4</span></div><div class="line"><span class="keyword">import</span> QtQuick.Controls <span class="number">1.4</span></div><div class="line"></div><div class="line">Rectangle &#123;</div><div class="line">    id: timeEdit</div><div class="line">    property string time</div><div class="line">    property <span class="built_in">int</span> <span class="built_in">hour</span>: <span class="number">0</span></div><div class="line">    property <span class="built_in">int</span> <span class="built_in">minute</span>: <span class="number">0</span></div><div class="line">    property <span class="built_in">int</span> timePointWidth: <span class="number">24</span></div><div class="line">    property <span class="built_in">int</span> controlWidth: <span class="number">20</span></div><div class="line">    property <span class="built_in">color</span> selectionColor: <span class="string">'blue'</span></div><div class="line"></div><div class="line">    property var theme: QtObject &#123;</div><div class="line">        id: theme</div><div class="line">        objectName: <span class="string">"theme"</span></div><div class="line"></div><div class="line">        property string fontFamily: <span class="string">'Microsoft YaHei'</span></div><div class="line">        property real fontSize: <span class="number">14</span></div><div class="line">        property <span class="built_in">int</span> fontWeight: Font.Normal</div><div class="line">        property <span class="built_in">color</span> textColor: <span class="string">'#222222'</span></div><div class="line">        property <span class="built_in">color</span> borderColor: <span class="string">'#D3D3D3'</span></div><div class="line">    &#125;</div><div class="line">    border.<span class="built_in">width</span>: <span class="number">1</span></div><div class="line">    border.<span class="built_in">color</span>: theme.borderColor</div><div class="line">    <span class="built_in">width</span>: <span class="number">80</span></div><div class="line">    <span class="built_in">height</span>: <span class="number">26</span></div><div class="line"></div><div class="line">    Row&#123;</div><div class="line">        spacing:<span class="number">1</span></div><div class="line">        <span class="built_in">width</span>: parent.<span class="built_in">width</span> - control.<span class="built_in">width</span></div><div class="line">        <span class="built_in">height</span>: parent.<span class="built_in">height</span></div><div class="line">        TextInput &#123;</div><div class="line">            id: hours</div><div class="line">            <span class="built_in">height</span>: parent.<span class="built_in">height</span></div><div class="line">            <span class="built_in">width</span>: timePointWidth</div><div class="line">            <span class="built_in">color</span>: theme.textColor</div><div class="line">            font &#123;</div><div class="line">                family: theme.fontFamily</div><div class="line">                pixelSize: theme.fontSize - <span class="number">1</span></div><div class="line">                weight: theme.fontWeight</div><div class="line">            &#125;</div><div class="line">            selectByMouse: <span class="keyword">true</span></div><div class="line">            maximumLength: <span class="number">2</span></div><div class="line"></div><div class="line">            selectionColor: timeEdit.selectionColor</div><div class="line">            mouseSelectionMode: TextInput.SelectWords</div><div class="line">            validator: IntValidator&#123;bottom: <span class="number">0</span>; top: <span class="number">23</span>;&#125;</div><div class="line">            verticalAlignment: Text.AlignVCenter</div><div class="line">            horizontalAlignment: Text.AlignHCenter</div><div class="line"></div><div class="line">            <span class="built_in">text</span>: <span class="built_in">hour</span> &lt; <span class="number">10</span> ? <span class="string">'0'</span>+ <span class="built_in">hour</span>: <span class="built_in">hour</span> &gt;= <span class="number">24</span> ? <span class="number">0</span> : <span class="built_in">hour</span></div><div class="line">            onEditingFinished:&#123;</div><div class="line">                <span class="built_in">hour</span> = parseInt(hours.<span class="built_in">text</span>.<span class="built_in">trim</span>())</div><div class="line">            &#125;</div><div class="line">            onActiveFocusChanged: &#123;</div><div class="line">                <span class="keyword">if</span> (activeFocus)&#123;</div><div class="line">                    hours.selectAll();</div><div class="line">                    minutes.deselect();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            onTextChanged: &#123;</div><div class="line">                <span class="keyword">if</span> (activeFocus)&#123;</div><div class="line">                    hours.selectAll();</div><div class="line">                    minutes.deselect();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        Text &#123;</div><div class="line">            id: separator</div><div class="line">            <span class="built_in">width</span>:<span class="number">6</span></div><div class="line">            <span class="built_in">height</span>: parent.<span class="built_in">height</span></div><div class="line">            verticalAlignment: Text.AlignVCenter</div><div class="line">            horizontalAlignment: Text.AlignHCenter</div><div class="line">            <span class="built_in">text</span>: <span class="string">":"</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        TextInput &#123;</div><div class="line">            id: minutes</div><div class="line">            <span class="built_in">height</span>: parent.<span class="built_in">height</span></div><div class="line">            <span class="built_in">width</span>: timePointWidth</div><div class="line">            <span class="built_in">color</span>: theme.textColor</div><div class="line">            font &#123;</div><div class="line">                family: theme.fontFamily</div><div class="line">                pixelSize: theme.fontSize - <span class="number">1</span></div><div class="line">                weight: theme.fontWeight</div><div class="line">            &#125;</div><div class="line">            selectByMouse: <span class="keyword">true</span></div><div class="line">            maximumLength: <span class="number">2</span></div><div class="line"></div><div class="line">            selectionColor: timeEdit.selectionColor</div><div class="line">            mouseSelectionMode: TextInput.SelectWords</div><div class="line">            validator: IntValidator&#123;bottom: <span class="number">0</span>; top: <span class="number">59</span>;&#125;</div><div class="line">            verticalAlignment: Text.AlignVCenter</div><div class="line">            horizontalAlignment: Text.AlignHCenter</div><div class="line"></div><div class="line">            <span class="built_in">text</span>: <span class="built_in">minute</span> &lt; <span class="number">10</span> ? <span class="string">'0'</span>+ <span class="built_in">minute</span>: <span class="built_in">minute</span> &gt;= <span class="number">60</span> ? <span class="number">0</span> : <span class="built_in">minute</span></div><div class="line">            onEditingFinished:&#123;</div><div class="line">                <span class="built_in">minute</span> = parseInt(minutes.<span class="built_in">text</span>.<span class="built_in">trim</span>())</div><div class="line">            &#125;</div><div class="line">            onActiveFocusChanged: &#123;</div><div class="line">                <span class="keyword">if</span> (activeFocus)&#123;</div><div class="line">                    minutes.selectAll();</div><div class="line">                    hours.deselect();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            onTextChanged: &#123;</div><div class="line">                <span class="keyword">if</span> (activeFocus)&#123;</div><div class="line">                    minutes.selectAll();</div><div class="line">                    hours.deselect();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    Rectangle&#123;</div><div class="line">        id: control</div><div class="line">        <span class="built_in">width</span>: controlWidth</div><div class="line">        anchors.right: parent.right</div><div class="line">        anchors.rightMargin: <span class="number">1</span></div><div class="line">        anchors.top: parent.top</div><div class="line">        anchors.topMargin: <span class="number">1</span></div><div class="line">        anchors.bottom: parent.bottom</div><div class="line">        anchors.bottomMargin: <span class="number">1</span></div><div class="line">        Button&#123;</div><div class="line">            <span class="built_in">width</span>: parent.<span class="built_in">width</span></div><div class="line">            <span class="built_in">height</span>:  parseInt(parent.<span class="built_in">height</span> / <span class="number">2</span>)</div><div class="line">            anchors.left: parent.left</div><div class="line">            anchors.top: parent.top</div><div class="line">            <span class="built_in">text</span>: <span class="string">"︿"</span></div><div class="line">            onClicked: &#123;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (minutes.activeFocus)&#123;</div><div class="line">                    <span class="built_in">minute</span> = parseInt(minutes.<span class="built_in">text</span>.<span class="built_in">trim</span>())</div><div class="line">                    <span class="built_in">minute</span> = <span class="built_in">minute</span> + <span class="number">1</span>;</div><div class="line">                    <span class="keyword">if</span>(<span class="built_in">minute</span> &gt; <span class="number">59</span>)</div><div class="line">                    &#123;</div><div class="line">                        <span class="built_in">minute</span> = <span class="number">0</span></div><div class="line">                    &#125;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="built_in">hour</span> = parseInt(hours.<span class="built_in">text</span>.<span class="built_in">trim</span>())</div><div class="line">                    <span class="built_in">hour</span> = <span class="built_in">hour</span> + <span class="number">1</span>;</div><div class="line">                    <span class="keyword">if</span>(<span class="built_in">hour</span> &gt; <span class="number">23</span>)&#123;</div><div class="line">                        <span class="built_in">hour</span> = <span class="number">0</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (!hours.activeFocus)&#123;</div><div class="line">                        hours.selectAll();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        Button&#123;</div><div class="line">            <span class="built_in">width</span>: parent.<span class="built_in">width</span></div><div class="line">            <span class="built_in">height</span>: parseInt(parent.<span class="built_in">height</span> / <span class="number">2</span>)</div><div class="line">            anchors.left: parent.left</div><div class="line">            anchors.bottom: parent.bottom</div><div class="line">            <span class="built_in">text</span>: <span class="string">"﹀"</span></div><div class="line">            onClicked: &#123;</div><div class="line">                <span class="keyword">if</span> (minutes.activeFocus)&#123;</div><div class="line">                    <span class="built_in">minute</span> = parseInt(minutes.<span class="built_in">text</span>.<span class="built_in">trim</span>())</div><div class="line">                    <span class="built_in">minute</span> = <span class="built_in">minute</span> - <span class="number">1</span>;</div><div class="line">                    <span class="keyword">if</span>(<span class="built_in">minute</span> &lt; <span class="number">0</span>)&#123;</div><div class="line">                        <span class="built_in">minute</span> = <span class="number">59</span></div><div class="line">                    &#125;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="built_in">hour</span> = parseInt(hours.<span class="built_in">text</span>.<span class="built_in">trim</span>())</div><div class="line">                    <span class="built_in">hour</span> = <span class="built_in">hour</span> - <span class="number">1</span>;</div><div class="line">                    <span class="keyword">if</span>(<span class="built_in">hour</span> &lt; <span class="number">0</span>)&#123;</div><div class="line">                        <span class="built_in">hour</span> = <span class="number">23</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (!hours.activeFocus)&#123;</div><div class="line">                        hours.selectAll();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="日期控件"><a href="#日期控件" class="headerlink" title="日期控件"></a>日期控件</h3><p>基于时间控件的日期选择器,</p><p><img src="/img/201702/1-2.png" alt="带时间设置的日期选择"></p><p><img src="/img/201702/1-3.png" alt="不带时间设置的日期选择"><br><figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> QtQuick <span class="number">2.7</span></div><div class="line"><span class="keyword">import</span> QtQuick.Controls <span class="number">1.4</span></div><div class="line"><span class="keyword">import</span> QtQuick.Layouts <span class="number">1.1</span></div><div class="line"><span class="keyword">import</span> QtQuick.Controls.Styles <span class="number">1.4</span></div><div class="line"></div><div class="line"><span class="title">TextField</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">property</span><span class="string"> date originDate</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()       <span class="comment">//原始时间</span></div><div class="line">    <span class="keyword">property</span><span class="string"> string dateValue</span>:<span class="string">"%1-%2-%3"</span>.arg(originDate.getFullYear()).arg(originDate.getMonth()+<span class="number">1</span>).arg(originDate.getDate()); <span class="comment">//显示的日期格式字符串</span></div><div class="line"></div><div class="line">    <span class="keyword">property</span><span class="string"> alias selectedDate</span>: calendar.selectedDate <span class="comment">//获取设置后日期</span></div><div class="line">    <span class="keyword">property</span><span class="string"> alias hour</span>: timeEidt.hour                 <span class="comment">//获取设置后小时</span></div><div class="line">    <span class="keyword">property</span><span class="string"> alias minute</span>: timeEidt.minute             <span class="comment">//获取设置后分钟</span></div><div class="line">    <span class="keyword">property</span><span class="string"> bool showDropDownButton</span>: <span class="literal">true</span>  <span class="comment">//是否显示下拉按钮</span></div><div class="line">    <span class="keyword">property</span><span class="string"> bool canEditTime</span>: <span class="literal">false</span>         <span class="comment">//是否允许设置时间</span></div><div class="line">    <span class="keyword">property</span><span class="string"> int timeEditorHeight</span>: <span class="number">30</span></div><div class="line">    <span class="keyword">property</span><span class="string"> var theme</span>: <span class="title">QtObject</span> &#123;</div><div class="line">        <span class="attribute">id:</span><span class="string"> theme</span></div><div class="line">        <span class="attribute">objectName</span>: <span class="string">"theme"</span></div><div class="line"></div><div class="line">        <span class="keyword">property</span><span class="string"> string fontFamily</span>: <span class="string">'Microsoft YaHei'</span></div><div class="line">        <span class="keyword">property</span><span class="string"> real fontSize</span>: <span class="number">14</span></div><div class="line">        <span class="keyword">property</span><span class="string"> int fontWeight</span>: Font.Normal</div><div class="line">        <span class="keyword">property</span><span class="string"> color textColor</span>: <span class="string">'#222222'</span></div><div class="line">        <span class="keyword">property</span><span class="string"> color borderColor</span>: <span class="string">'#D3D3D3'</span></div><div class="line"></div><div class="line">        <span class="keyword">property</span><span class="string"> color sameMonthDateTextColor</span>: <span class="string">"#444"</span></div><div class="line">        <span class="keyword">property</span><span class="string"> color selectedDateColor</span>: Qt.platform.os === <span class="string">"osx"</span> ? <span class="string">"#3778d0"</span> : <span class="string">"#3778d0"</span></div><div class="line">        <span class="keyword">property</span><span class="string"> color selectedDateTextColor</span>: <span class="string">"white"</span></div><div class="line">        <span class="keyword">property</span><span class="string"> color differentMonthDateTextColor</span>: <span class="string">"#bbb"</span></div><div class="line">        <span class="keyword">property</span><span class="string"> color invalidDatecolor</span>: <span class="string">"#dddddd"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="attribute">readOnly</span>:<span class="attribute">true</span></div><div class="line">    width: <span class="number">150</span></div><div class="line">    <span class="attribute">textColor</span>: theme.textColor</div><div class="line">    <span class="title">font</span> &#123;</div><div class="line">        <span class="attribute">family</span>: theme.fontFamily</div><div class="line">        <span class="attribute">pixelSize</span>: theme.fontSize - <span class="number">1</span></div><div class="line">        <span class="attribute">weight</span>: theme.fontWeight</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">property</span><span class="string"> string __timeFormatter</span>: &#123;</div><div class="line">        <span class="keyword">var</span> formatter = <span class="string">' %1'</span>;</div><div class="line">        <span class="keyword">if</span> (hour &lt; <span class="number">10</span>)&#123;</div><div class="line">            formatter = <span class="string">' 0%1'</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(minute &lt; <span class="number">10</span>)&#123;</div><div class="line">            formatter = formatter + <span class="string">':0%2'</span></div><div class="line">        &#125;<span class="title">else</span>&#123;</div><div class="line">            formatter =formatter + <span class="string">':%2'</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> formatter;</div><div class="line">    &#125;</div><div class="line">    <span class="attribute">text</span>: canEditTime ? dateValue + __timeFormatter.arg(hour).arg(minute) : dateValue</div><div class="line"></div><div class="line">    <span class="title">Rectangle</span>&#123;</div><div class="line">        <span class="attribute">id:</span><span class="string"> container</span></div><div class="line">        <span class="attribute">anchors.topMargin</span>: <span class="number">0</span></div><div class="line">        <span class="attribute">anchors.top</span>: <span class="built_in">parent</span>.bottom</div><div class="line">        <span class="attribute">implicitHeight</span>:  canEditTime ? calendar.height + <span class="attribute">timeEditorHeight</span> : calendar.height</div><div class="line">        <span class="attribute">implicitWidth</span>: calendar.width</div><div class="line">        <span class="attribute">visible</span>: <span class="literal">false</span></div><div class="line">        <span class="attribute">border.width</span>: <span class="number">1</span></div><div class="line">        <span class="attribute">border.color</span>: theme.borderColor</div><div class="line">        <span class="title">Calendar</span>&#123;</div><div class="line">            <span class="attribute">id:</span><span class="string"> calendar</span></div><div class="line">            <span class="attribute">frameVisible</span>: <span class="literal">true</span></div><div class="line">            <span class="attribute">selectedDate</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()</div><div class="line">            <span class="attribute">activeFocusOnTab</span>: <span class="literal">true</span></div><div class="line">            <span class="attribute">onReleased</span>: &#123;</div><div class="line">                dateValue = Qt.binding(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    <span class="keyword">return</span> <span class="string">"%1-%2-%3"</span>.arg(<span class="built_in">date</span>.getFullYear()).arg(<span class="built_in">date</span>.getMonth()+<span class="number">1</span>).arg(<span class="built_in">date</span>.getDate());</div><div class="line">                &#125;)</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (!canEditTime)&#123;</div><div class="line">                    container.visible = <span class="literal">false</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="attribute">style</span>: <span class="title">CalendarStyle</span>&#123;</div><div class="line">                <span class="attribute">navigationBar</span>:  <span class="title">RowLayout</span>&#123;</div><div class="line">                    <span class="attribute">width</span>: <span class="built_in">parent</span>.width</div><div class="line">                    <span class="attribute">implicitWidth</span>: <span class="built_in">parent</span>.width</div><div class="line">                    <span class="attribute">spacing</span>: <span class="number">2</span></div><div class="line">                    <span class="title">Item</span>&#123;</div><div class="line">                        <span class="attribute">Layout.preferredWidth</span>: <span class="number">4</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="title">Button</span>&#123;</div><div class="line">                        <span class="attribute">Layout.alignment</span>: Qt.AlignLeft</div><div class="line">                        <span class="attribute">text</span>: <span class="string">"〈"</span></div><div class="line">                        <span class="attribute">onClicked</span>: control.showPreviousMonth()</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="title">Label</span> &#123;</div><div class="line">                        <span class="attribute">Layout.alignment</span>: Qt.AlignHCenter</div><div class="line">                        <span class="attribute">Layout.fillWidth</span>: <span class="literal">true</span></div><div class="line">                        <span class="attribute">verticalAlignment</span>: Text.AlignVCenter</div><div class="line">                        <span class="attribute">antialiasing</span>: <span class="literal">true</span></div><div class="line">                        <span class="title">font</span> &#123;</div><div class="line">                            <span class="attribute">family</span>: theme.fontFamily</div><div class="line">                            <span class="attribute">weight</span>: theme.fontWeight</div><div class="line">                        &#125;</div><div class="line">                        <span class="attribute">color</span>: theme.textColor</div><div class="line">                        <span class="attribute">font.pixelSize</span>: theme.fontSize + <span class="number">2</span></div><div class="line">                        <span class="attribute">text</span>: &#123;</div><div class="line">                            <span class="keyword">var</span> tempTitle =  styleData.title.split(<span class="string">' '</span>);</div><div class="line">                            <span class="keyword">return</span> tempTitle.length &gt; <span class="number">1</span> ? tempTitle[<span class="number">1</span>] + <span class="string">' '</span> + tempTitle[<span class="number">0</span>] : styleData.title</div><div class="line">                        &#125;</div><div class="line">                        <span class="attribute">horizontalAlignment</span>: Text.AlignHCenter</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="title">Button</span>&#123;</div><div class="line">                        <span class="attribute">Layout.alignment</span>: Qt.AlignRight</div><div class="line">                        <span class="attribute">text</span>: <span class="string">"〉"</span></div><div class="line">                        <span class="attribute">onClicked</span>:  control.showNextMonth()</div><div class="line">                    &#125;</div><div class="line">                    <span class="title">Item</span>&#123;</div><div class="line">                        <span class="attribute">Layout.preferredWidth</span>: <span class="number">4</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="attribute">dayOfWeekDelegate</span>: <span class="title">Rectangle</span>&#123;</div><div class="line">                    <span class="attribute">implicitHeight</span>: <span class="number">24</span></div><div class="line"></div><div class="line">                    <span class="title">Text</span> &#123;</div><div class="line">                        <span class="attribute">anchors.centerIn</span>: <span class="built_in">parent</span></div><div class="line">                        <span class="attribute">verticalAlignment</span>: Text.AlignVCenter</div><div class="line">                        <span class="attribute">antialiasing</span>: <span class="literal">true</span></div><div class="line">                        <span class="title">font</span> &#123;</div><div class="line">                            <span class="attribute">family</span>: theme.fontFamily</div><div class="line">                            <span class="attribute">weight</span>: theme.fontWeight</div><div class="line">                        &#125;</div><div class="line">                        <span class="attribute">color</span>: theme.textColor</div><div class="line">                        <span class="attribute">font.pixelSize</span>: theme.fontSize - <span class="number">1</span></div><div class="line">                        <span class="attribute">text</span>: &#123;</div><div class="line">                            <span class="keyword">switch</span>(styleData.dayOfWeek)&#123;</div><div class="line">                            <span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">return</span> <span class="string">'日'</span>;</div><div class="line">                            <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">return</span> <span class="string">'一'</span>;</div><div class="line">                            <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">return</span> <span class="string">'二'</span>;</div><div class="line">                            <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">return</span> <span class="string">'三'</span>;</div><div class="line">                            <span class="keyword">case</span> <span class="number">4</span>: <span class="keyword">return</span> <span class="string">'四'</span>;</div><div class="line">                            <span class="keyword">case</span> <span class="number">5</span>: <span class="keyword">return</span> <span class="string">'五'</span>;</div><div class="line">                            <span class="keyword">case</span> <span class="number">6</span>: <span class="keyword">return</span> <span class="string">'六'</span>;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="attribute">dayDelegate</span>: <span class="title">Item</span> &#123;</div><div class="line">                    <span class="title">Rectangle</span> &#123;</div><div class="line">                        <span class="attribute">anchors.fill</span>: <span class="built_in">parent</span></div><div class="line"></div><div class="line">                        <span class="attribute">border.color</span>: <span class="string">"transparent"</span></div><div class="line">                        <span class="attribute">color</span>: styleData.date !== <span class="literal">undefined</span> &amp;&amp; styleData.selected ? <span class="attribute">theme.selectedDateColor</span> : <span class="string">"transparent"</span></div><div class="line">                        <span class="attribute">anchors.margins</span>: styleData.selected ? <span class="number">-1</span> : <span class="number">0</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="title">Label</span> &#123;</div><div class="line">                        <span class="attribute">anchors.centerIn</span>: <span class="built_in">parent</span></div><div class="line">                        <span class="attribute">font.pointSize</span>: <span class="number">10</span></div><div class="line">                        <span class="attribute">text</span>: styleData.date.getDate()</div><div class="line">                        <span class="attribute">verticalAlignment</span>: Text.AlignVCenter</div><div class="line">                        <span class="attribute">antialiasing</span>: <span class="literal">true</span></div><div class="line">                        <span class="title">font</span> &#123;</div><div class="line">                            <span class="attribute">family</span>: theme.fontFamily</div><div class="line">                            <span class="attribute">pixelSize</span>: theme.fontSize</div><div class="line">                            <span class="attribute">weight</span>: theme.fontWeight</div><div class="line">                        &#125;</div><div class="line">                        <span class="attribute">horizontalAlignment</span>: Text.AlignHCenter</div><div class="line">                        <span class="attribute">color</span>: &#123;</div><div class="line">                            <span class="keyword">var</span> <span class="built_in">color</span> = theme.invalidDatecolor;</div><div class="line">                            <span class="keyword">if</span> (styleData.valid) &#123;</div><div class="line">                                <span class="built_in">color</span> = styleData.visibleMonth ? <span class="attribute">theme.sameMonthDateTextColor</span> : theme.differentMonthDateTextColor;</div><div class="line">                                <span class="keyword">if</span> (styleData.selected) &#123;</div><div class="line">                                    <span class="built_in">color</span> = theme.selectedDateTextColor;</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">return</span> <span class="built_in">color</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="title">RowLayout</span>&#123;</div><div class="line">            <span class="attribute">visible</span>: canEditTime</div><div class="line">            <span class="attribute">height</span>: timeEditorHeight - <span class="number">2</span></div><div class="line">            <span class="attribute">width</span>: <span class="built_in">parent</span>.width</div><div class="line">            <span class="attribute">anchors.top</span>: calendar.bottom;</div><div class="line">            <span class="attribute">anchors.left</span>: <span class="built_in">parent</span>.left</div><div class="line">            <span class="title">Item</span>&#123;</div><div class="line">                <span class="attribute">Layout.preferredWidth</span>: <span class="number">4</span></div><div class="line">            &#125;</div><div class="line">            <span class="title">Text</span>&#123;</div><div class="line">                <span class="attribute">anchors.leftMargin</span>: <span class="number">4</span></div><div class="line">                <span class="attribute">Layout.preferredHeight</span>:  <span class="built_in">parent</span>.height</div><div class="line">                <span class="attribute">Layout.preferredWidth</span>: <span class="number">40</span></div><div class="line">                <span class="attribute">Layout.alignment</span>: Qt.AlignHCenter | Qt.AlignVCenter</div><div class="line">                <span class="attribute">verticalAlignment</span>: Text.AlignVCenter</div><div class="line">                <span class="attribute">antialiasing</span>: <span class="literal">true</span></div><div class="line">                <span class="title">font</span> &#123;</div><div class="line">                    <span class="attribute">family</span>: theme.fontFamily</div><div class="line">                    <span class="attribute">pixelSize</span>: theme.fontSize</div><div class="line">                    <span class="attribute">weight</span>: theme.fontWeight</div><div class="line">                &#125;</div><div class="line">                <span class="attribute">color</span>: theme.textColor</div><div class="line">                <span class="attribute">text</span>: <span class="string">'时间:'</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="title">TimeEdit</span>&#123;</div><div class="line">                <span class="attribute">id:</span><span class="string"> timeEidt</span></div><div class="line">                <span class="attribute">Layout.preferredHeight</span>:  <span class="built_in">parent</span>.height - <span class="number">2</span></div><div class="line">                <span class="attribute">Layout.preferredWidth</span>: <span class="number">80</span></div><div class="line">                <span class="attribute">selectionColor</span>: theme.selectedDateColor</div><div class="line">                <span class="attribute">hour</span>: originDate.getHours()</div><div class="line">                <span class="attribute">minute</span>: originDate.getMinutes()</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="title">Item</span>&#123;</div><div class="line">                <span class="attribute">Layout.fillHeight</span>: <span class="literal">true</span></div><div class="line">                <span class="attribute">Layout.fillWidth</span>: <span class="literal">true</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="title">Button</span>&#123;</div><div class="line">                <span class="attribute">Layout.preferredWidth</span>: <span class="number">36</span></div><div class="line">                <span class="attribute">Layout.preferredHeight</span>: <span class="number">26</span></div><div class="line">                <span class="attribute">Layout.alignment</span>: Qt.AlignHCenter | Qt.AlignVCenter</div><div class="line">                <span class="attribute">text</span>: <span class="string">'取消'</span></div><div class="line">                <span class="attribute">onClicked</span>: &#123;</div><div class="line">                    selectedDate = originDate</div><div class="line">                    timeEidt.hour = originDate.getHours();</div><div class="line">                    timeEidt.minute = originDate.getMinutes();</div><div class="line">                    container.visible = <span class="literal">false</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="title">Button</span>&#123;</div><div class="line">                <span class="attribute">Layout.preferredWidth</span>: <span class="number">36</span></div><div class="line">                <span class="attribute">Layout.preferredHeight</span>: <span class="number">26</span></div><div class="line">                <span class="attribute">Layout.alignment</span>: Qt.AlignHCenter | Qt.AlignVCenter</div><div class="line">                <span class="attribute">text</span>: <span class="string">'确定'</span></div><div class="line">                <span class="attribute">onClicked</span>: &#123;</div><div class="line">                    container.visible = <span class="literal">false</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="title">Item</span>&#123;</div><div class="line">                <span class="attribute">Layout.preferredWidth</span>: <span class="number">4</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="title">MouseArea</span>&#123;</div><div class="line">        <span class="attribute">enabled</span>: !showDropDownButton</div><div class="line">        <span class="attribute">anchors.fill</span>: <span class="built_in">parent</span></div><div class="line">        <span class="attribute">onClicked</span>: &#123;</div><div class="line">            container.visible = !container.visible</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="title">Button</span>&#123;</div><div class="line">        <span class="attribute">visible</span>: showDropDownButton</div><div class="line">        <span class="attribute">id:</span><span class="string"> downBtn</span></div><div class="line">        <span class="attribute">width</span>: <span class="number">22</span></div><div class="line">        <span class="attribute">anchors.right</span>: <span class="built_in">parent</span>.right</div><div class="line">        <span class="attribute">anchors.rightMargin</span>: <span class="number">0</span></div><div class="line">        <span class="attribute">anchors.bottom</span>: <span class="built_in">parent</span>.bottom</div><div class="line">        <span class="attribute">anchors.bottomMargin</span>: <span class="number">0</span></div><div class="line">        <span class="attribute">anchors.top</span>: <span class="built_in">parent</span>.top</div><div class="line">        <span class="attribute">anchors.topMargin</span>: <span class="number">0</span></div><div class="line">        <span class="attribute">text</span>: <span class="string">"﹀"</span></div><div class="line">        <span class="attribute">onClicked</span>: container.visible = !container.visible</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Qt Quick Control 1.x中是没有日期组件和时间组件，好在Qml够灵活，没有的东西可以自己来造。道生一，一生二，二生三，三生万物，瞬间回归到了哲学的本质。&lt;/p&gt;
&lt;h3 id=&quot;时间控件&quot;&gt;&lt;a href=&quot;#时间控件&quot; class=&quot;headerlink&quot; title=&quot;时间控件&quot;&gt;&lt;/a&gt;时间控件&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/img/201702/1-1.png&quot; alt=&quot;图片&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Qml" scheme="http://idealife.github.io/categories/Qml/"/>
    
    
      <category term="Qml" scheme="http://idealife.github.io/tags/Qml/"/>
    
  </entry>
  
  <entry>
    <title>Qt5.7 Qml的项目部署问题</title>
    <link href="http://idealife.github.io/2017/01/20/Qt5-7-Qml%E7%9A%84%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E9%97%AE%E9%A2%98/"/>
    <id>http://idealife.github.io/2017/01/20/Qt5-7-Qml的项目部署问题/</id>
    <published>2017-01-20T12:39:45.000Z</published>
    <updated>2017-09-09T09:13:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>Qt的跨平台是个好东西，但是平台的差异巨大，想要一招鲜吃天下还是有点难度的，因为Qt的Qml跨平台之路也不是那么的顺风顺水，还有很多坑要求去填。</p><p>今天就说说打包的问题。<br><a id="more"></a><br>在Windows中使用Qt的安装包中的工具windeployqt.exe。<br>由于QtCreator在Windows中的Debug速度很慢，基本都在Release中进行开发，故Release的配置中不再配置deploy相关的任务，将部署单独使用脚本处理:   </p><blockquote><p><code>C:\Qt\Qt5.7.0\5.7\msvc2013\bin\windeployqt.exe -qmldir C:\Qt\Qt5.7.0\5.7\msvc2013\qml XXX.exe</code>  </p></blockquote><p>由于Qt的部署工具还未完善，除此之外，上述命令处理后，除了需要Deployment中需要的文件之外，还需要手动从<code>C:\Qt\Qt5.7.0\5.7\msvc2013\qml</code>将<code>QtWebEngine</code>、<code>QtQuick</code>、<code>QtGraphicalEffects</code>这三个文件复制到部署目录中（完全覆盖即可，这些组件是项目中用到的）。</p><p>更多内容详见官方文档<a href="http://doc.qt.io/qt-5/windows-deployment.html" target="_blank" rel="external">windows-deployment</a>。 </p><p>注：</p><p>1、程序运行发现Qt5.7中窗口的变化有明显的黑影现象，和底层的图形库有关，因此libEGL.dll<code>、</code>libGLESV2.dll<code>、</code>libGLESV2.dll`这三个dll使用的是Qt5.6中带的库。</p><p>2、还需要增加msvcp120.dll<code>、</code>msvcp120.dll`这两个Windows系统中所需的VC++的运行库</p><p>在macOS中的部署类似，Debug的速度不慢，调试在Debug模式下，发布在Release模式。因此就将macdeployqt直接配置在Release中。首先在QtCreator的项目Release版本的设置中增加自定义构建步骤，如图所示：<br><img src="/img/201701/1-1.png" alt="图片">。</p><p>具体方法详见Qt官方文档<a href="http://doc.qt.io/qt-5/osx-deployment.html" target="_blank" rel="external">osx-deployment</a>。</p><p>同时也需要手工复制源码下的<code>QtGraphicalEffects</code>、<code>QtWebEngine</code>至<code>XXX.app/Contents/Resources/qml</code>中。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Qt的跨平台是个好东西，但是平台的差异巨大，想要一招鲜吃天下还是有点难度的，因为Qt的Qml跨平台之路也不是那么的顺风顺水，还有很多坑要求去填。&lt;/p&gt;
&lt;p&gt;今天就说说打包的问题。&lt;br&gt;
    
    </summary>
    
      <category term="Qml" scheme="http://idealife.github.io/categories/Qml/"/>
    
    
      <category term="Qml" scheme="http://idealife.github.io/tags/Qml/"/>
    
      <category term="Qt" scheme="http://idealife.github.io/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>关于Qml中的model绑定问题</title>
    <link href="http://idealife.github.io/2016/08/26/%E5%85%B3%E4%BA%8EQml%E4%B8%AD%E7%9A%84model%E7%BB%91%E5%AE%9A%E9%97%AE%E9%A2%98/"/>
    <id>http://idealife.github.io/2016/08/26/关于Qml中的model绑定问题/</id>
    <published>2016-08-26T10:12:34.000Z</published>
    <updated>2017-09-09T09:13:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>Qml中ListView,GridView等视图组件可以通过model属性绑定数据源，通过delegate进行渲染。model属性可以有多种选择，可以是ListModel类型，也可以是数字，或者JavaScript中的数组。Repeater组件中的model更是可以接收任意类型。</p><p><code>A ListView displays data from models created from built-in QML types like ListModel and XmlListModel, or custom model classes defined in C++ that inherit from QAbstractItemModel or QAbstractListModel.A ListView has a model, which defines the data to be displayed, and a delegate, which defines how the data should be displayed. Items in a ListView are laid out horizontally or vertically. List views are inherently flickable because ListView inherits from Flickable.</code><br><a id="more"></a><br>如果是通过C++自定义model类型的话，需要继承QAbstractItemModel，这样子的话model的变化就会通知View进行重新渲染。否则底层数据变化，需要手动刷新界面。</p><p><code>A model can be defined by subclassing QAbstractItemModel. This is the best approach if you have a more complex model that cannot be supported by the other approaches. A QAbstractItemModel can also automatically notify a QML view when the model data changes.</code></p><p>下面看一个使用JavaScript中的数组对象例子，通过注释1，注释2的方式修改数组的内容，并不会触发数据对象本身的变化，也就不会进行视图的更新，需要手工重新给model指向数组对象或者让数组对象变化，才能触发更新。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">import</span> <span class="selector-tag">QtQuick</span> 2<span class="selector-class">.7</span></div><div class="line"><span class="selector-tag">import</span> <span class="selector-tag">QtQuick</span><span class="selector-class">.Window</span> 2<span class="selector-class">.2</span></div><div class="line"><span class="selector-tag">import</span> <span class="selector-tag">QtQuick</span><span class="selector-class">.Controls</span> 1<span class="selector-class">.4</span></div><div class="line"></div><div class="line"><span class="selector-tag">Window</span> &#123;</div><div class="line">    <span class="attribute">visible</span>: true</div><div class="line">    width: <span class="number">640</span></div><div class="line">    height: <span class="number">480</span></div><div class="line">    title: <span class="built_in">qsTr</span>(<span class="string">"Hello World"</span>)</div><div class="line"></div><div class="line">    property var list: [<span class="string">'Hello'</span>,<span class="string">'Qml'</span>,<span class="string">'!'</span>]</div><div class="line"></div><div class="line">    Row&#123;</div><div class="line">        id: row</div><div class="line">        Repeater&#123;</div><div class="line">            id: repeater</div><div class="line">            model: list</div><div class="line">            Rectangle &#123;</div><div class="line">                width: <span class="number">100</span>; <span class="attribute">height</span>: <span class="number">40</span></div><div class="line">                border.width: <span class="number">1</span></div><div class="line">                color: <span class="string">"yellow"</span></div><div class="line">                Text&#123;</div><div class="line">                    id: label</div><div class="line">                    verticalAlignment: Qt.AlignVCenter</div><div class="line">                    horizontalAlignment: Qt.AlignHCenter</div><div class="line">                    width: <span class="number">40</span></div><div class="line">                    height: <span class="number">40</span></div><div class="line">                    text: modelData</div><div class="line">                    color: <span class="string">'red'</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-tag">Button</span>&#123;</div><div class="line">        <span class="attribute">x</span>:<span class="number">0</span></div><div class="line">        y:<span class="number">60</span></div><div class="line">        width: <span class="number">100</span></div><div class="line">        height: <span class="number">30</span></div><div class="line">        text: <span class="string">"Update Data"</span></div><div class="line">        onClicked: &#123;</div><div class="line">            <span class="comment">/* 1 不会触发list对象的change</span></div><div class="line">            list.push("I")</div><div class="line">            list.push("Love")</div><div class="line">            list.push("Qml!")</div><div class="line">            */</div><div class="line"></div><div class="line">            <span class="comment">/* 2 不会触发list对象的change</span></div><div class="line">            list[1] = "Qt"</div><div class="line">            */</div><div class="line"></div><div class="line">            // <span class="number">3</span> 对象变化</div><div class="line">            list = [<span class="string">'Hello'</span>,<span class="string">'World'</span>]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-tag">Button</span>&#123;</div><div class="line">        <span class="attribute">x</span>:<span class="number">120</span></div><div class="line">        y:<span class="number">60</span></div><div class="line">        width: <span class="number">100</span></div><div class="line">        height: <span class="number">30</span></div><div class="line">        text: <span class="string">"Refresh View"</span></div><div class="line">        onClicked: &#123;</div><div class="line">            //针对<span class="number">1</span> <span class="number">2</span>的情况，需要重新绑定model 才会更新视图</div><div class="line">            repeater.model = list;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Qml中ListView,GridView等视图组件可以通过model属性绑定数据源，通过delegate进行渲染。model属性可以有多种选择，可以是ListModel类型，也可以是数字，或者JavaScript中的数组。Repeater组件中的model更是可以接收任意类型。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;A ListView displays data from models created from built-in QML types like ListModel and XmlListModel, or custom model classes defined in C++ that inherit from QAbstractItemModel or QAbstractListModel.
A ListView has a model, which defines the data to be displayed, and a delegate, which defines how the data should be displayed. Items in a ListView are laid out horizontally or vertically. List views are inherently flickable because ListView inherits from Flickable.&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Qml" scheme="http://idealife.github.io/categories/Qml/"/>
    
    
      <category term="Qml" scheme="http://idealife.github.io/tags/Qml/"/>
    
  </entry>
  
  <entry>
    <title>Qml中的组件封装</title>
    <link href="http://idealife.github.io/2016/07/08/Qml%E4%B8%AD%E7%BB%84%E4%BB%B6%E5%B0%81%E8%A3%85/"/>
    <id>http://idealife.github.io/2016/07/08/Qml中组件封装/</id>
    <published>2016-07-08T04:50:37.000Z</published>
    <updated>2017-09-09T09:13:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>Qml毕竟也是这几年才刚起来的，Qt Quick Control 1.x中的Qml组件不丰富，而且封装的功能相对简单，很多效果都需要自己重新实现。不过还是入了这个坑，毕竟<a href="http://blog.qt.io/blog/2016/06/10/qt-quick-controls-2-0-a-new-beginning/" target="_blank" rel="external">Qt Quick Control 2.0</a>刚出现不久，架构和底层变了，也是各种坑需要等着填。</p><a id="more"></a><p>在Qt Quick Control 1.x中，默认的样式并不能满足我们的视觉效果，所以需要重新定义Style,一般的组件都有[组件名+Style]的style样式可以修改使用。</p><p>先说一下Menu，MenuStyle的设置在Windows中没有问题，但是在MacOS中，设置的样式还是会丢失的，这个估计是Qt还没有做好底层的兼容。<br>另外Menu还有几个私有属性和方法未在文档中公开出来（可以在安装目录中找到对应组件的Qml源代码），但是我们在封装我们自定义的Menu组件中是需要用到的，一个是<code>__minimumWidth</code>，还有一个是<code>__popup()</code>方法。</p><p>再谈谈WebEngineView组件，对于Url的监控需要在onLoadingChanged中处理。如果要监控自定义协议类型的话，需继承QQuickWebEngineProfile实现新的Profile类，然后注册自定义协议名称(使用installUrlSchemeHandler可以注册多个协议)，就可以在Qml中的WebEngineView的profile中使用。如果网页中有QQ聊天工具的调用的话，捕获tencent://协议后，再调用外部浏览器直接将QQ唤起。</p><p>ScrollView组件要有更多的交互的话，需要用到几个私有属性：<code>__wheelAreaScrollSpeed</code> 滚动一次偏移的距离设置，<code>__scroller</code>显示的滚动条，可以通过下面的代码设置横竖滚动条的步进参数<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">__scroller<span class="selector-class">.verticalScrollBar</span><span class="selector-class">.singleStep</span></div><div class="line">__scroller<span class="selector-class">.horizontalScrollBar</span><span class="selector-class">.singleStep</span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Qml毕竟也是这几年才刚起来的，Qt Quick Control 1.x中的Qml组件不丰富，而且封装的功能相对简单，很多效果都需要自己重新实现。不过还是入了这个坑，毕竟&lt;a href=&quot;http://blog.qt.io/blog/2016/06/10/qt-quick-controls-2-0-a-new-beginning/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Qt Quick Control 2.0&lt;/a&gt;刚出现不久，架构和底层变了，也是各种坑需要等着填。&lt;/p&gt;
    
    </summary>
    
      <category term="Qml" scheme="http://idealife.github.io/categories/Qml/"/>
    
    
      <category term="Qml" scheme="http://idealife.github.io/tags/Qml/"/>
    
  </entry>
  
  <entry>
    <title>Qml中单例的使用</title>
    <link href="http://idealife.github.io/2016/06/09/Qml%E4%B8%AD%E5%8D%95%E4%BE%8B%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://idealife.github.io/2016/06/09/Qml中单例的使用/</id>
    <published>2016-06-09T13:33:32.000Z</published>
    <updated>2017-09-09T09:13:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>1、Qml中的单例实现</p><ul><li>编写组件<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="xml">//ThemeManager.qml</span></div><div class="line">pragma Singleton  //单例标志</div><div class="line">import QtQuick 2.0  </div><div class="line">  </div><div class="line">Item <span class="template-variable">&#123;  </span></div><div class="line">    property string name: "singleton"  </div><div class="line">&#125;<span class="xml"></span></div><div class="line">```  </div><div class="line">* 建立连接</div><div class="line"></div><div class="line">    相同目录下，新建qmldir文件,</div><div class="line"></div><div class="line">    在文件中添加`singleton ThemeManager          0.1 ThemeManager.qml`</div><div class="line"></div><div class="line">* 使用</div><div class="line">其他qml中，只要import ThemeManager.qml所在的文件夹路径就能直接使用ThemeManager 这个单例了。</div><div class="line"><span class="comment">&lt;!--more--&gt;</span></div><div class="line">2、Qml文件使用C++的提供的单例</div><div class="line">* 创建继承自QObject的C++类，datachannel</div><div class="line">* main.cpp中定义对应的变量和方法，并进行注册</div></pre></td></tr></table></figure></li></ul><p>DataChannel * channel = NULL;</p><p>static QObject <em>datachannel_singletontype_provider(QQmlEngine </em>engine, QJSEngine *scriptEngine)<br>{<br>    Q_UNUSED(engine)<br>    Q_UNUSED(scriptEngine)</p><pre><code>return channel;</code></pre><p>}</p><p> qmlRegisterSingletonType<datachannel>(“Demo.Channel”, 1, 0, “Channel”, datachannel_singletontype_provider);</datachannel></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">* </span>Qml中使用，导入对应的模块后，就能直接调用了。</div></pre></td></tr></table></figure><p>// 导入C++中注册的连接模块<br>import Demo.Channel 1.0;<br>Item {<br>    id: channel;<br>        property int state: Channel.getState();<br>}<br>```</p><p>3、Qml中使用JS文件</p><pre><code>只需要在js文件中，添加`.pragma library`的标识，然后在Qml中通过别名的方式引用。如下：`import &quot;../js/Util.js&quot; as Util`</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、Qml中的单例实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编写组件&lt;figure class=&quot;highlight dust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;
      
    
    </summary>
    
      <category term="Qml" scheme="http://idealife.github.io/categories/Qml/"/>
    
    
      <category term="Qml" scheme="http://idealife.github.io/tags/Qml/"/>
    
  </entry>
  
  <entry>
    <title>jwplayer的一些心得</title>
    <link href="http://idealife.github.io/2016/04/05/jwplayer%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BF%83%E5%BE%97/"/>
    <id>http://idealife.github.io/2016/04/05/jwplayer的一些心得/</id>
    <published>2016-04-05T12:05:35.000Z</published>
    <updated>2017-09-09T09:13:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>过年的时候阿里微信的红包大战打的火热，产品也准备蹭个热点，搞了一个活动页，仿阿里的咻一咻。</p><p>声音播放用的是jwplayer,有点杀鸡用牛刀的感觉，没办法，特殊原因必须需要支持Chrome/25.0.1364.172，<code>&lt;audio&gt;</code>如此方便的标签只能看不能用，让我先哭会去。<br><a id="more"></a><br>jwplayer用的是6.8版本，最新的7.3版本在官方注册后就能无水印使用了，6.8的话，需要自己DIY一下，将logo.png指向到本地加载。</p><p>6.8以后的版本除了水印问题，另外还会去请求p.jwpcdn.com下面的jwpsrv.js文件，而这个域名在国外，可能会受到干扰，从而导致打开速度变慢。</p><p>修改方式：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">q.repo = <span class="keyword">function</span>() &#123;</div><div class="line">    <span class="regexp">//</span> var t = <span class="string">"http://p.jwpcdn.com/"</span> + g.version.split(<span class="regexp">/\W/</span>).splice(<span class="number">0</span>, <span class="number">2</span>).join(<span class="string">"/"</span>) + <span class="string">"/"</span>;</div><div class="line">    <span class="regexp">//</span> try &#123;</div><div class="line">    <span class="regexp">//</span>     <span class="keyword">if</span> (q.isHTTPS()) &#123;</div><div class="line">    <span class="regexp">//</span>         t = t.replace(<span class="string">"http://"</span>, <span class="string">"https://ssl."</span>)</div><div class="line">    <span class="regexp">//</span>     &#125;</div><div class="line">    <span class="regexp">//</span> &#125; catch (u) &#123;</div><div class="line">    <span class="regexp">//</span> &#125;</div><div class="line">    var t = <span class="string">"./"</span>;  <span class="regexp">//</span>修改为本地获取相关资源</div><div class="line">    return t</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>在使用中也要注意,即使将播放器的长宽设置为0,在播放时,播放的控制按钮还是会出现的,所以可以将播放器所在的元素移到不可见的区域做隐藏处理<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//初始化播放器</span></div><div class="line"><span class="selector-tag">jwplayer</span>(<span class="string">"player"</span>)<span class="selector-class">.setup</span>(&#123;</div><div class="line">    <span class="attribute">file</span>: <span class="string">"voice.mp3"</span>,</div><div class="line">    <span class="attribute">width</span>: <span class="number">0</span>,</div><div class="line">    <span class="attribute">height</span>: <span class="number">0</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>如果是Windows平台，jwplayer在低版本的浏览器上还是需要flash对应版本的支持的，如果没有安装flash或者flash版本过低，播放将会失败，就需要使用其他的方式规避这个问题了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 检查flash版本</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">flashChecker</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> hasFlash = <span class="number">0</span>;　　　　 <span class="comment">//是否安装了flash</span></div><div class="line">    <span class="keyword">var</span> flashVersion = <span class="number">0</span>;　　 <span class="comment">//flash版本</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.all) &#123;</div><div class="line">        <span class="keyword">var</span> swf = <span class="keyword">new</span> ActiveXObject(<span class="string">'ShockwaveFlash.ShockwaveFlash'</span>);</div><div class="line">        <span class="keyword">if</span> (swf) &#123;</div><div class="line">            hasFlash = <span class="number">1</span>;</div><div class="line">            VSwf = swf.GetVariable(<span class="string">"$version"</span>);</div><div class="line">            flashVersion = <span class="built_in">parseInt</span>(VSwf.split(<span class="string">" "</span>)[<span class="number">1</span>].split(<span class="string">","</span>)[<span class="number">0</span>]);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (navigator.plugins &amp;&amp; navigator.plugins.length &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">var</span> swf2 = navigator.plugins[<span class="string">"Shockwave Flash"</span>];</div><div class="line">            <span class="keyword">if</span> (swf2) &#123;</div><div class="line">                hasFlash = <span class="number">1</span>;</div><div class="line">                <span class="keyword">var</span> words = swf2.description.split(<span class="string">" "</span>);</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; words.length; ++i) &#123;</div><div class="line">                    <span class="keyword">if</span> (<span class="built_in">isNaN</span>(<span class="built_in">parseInt</span>(words[i]))) <span class="keyword">continue</span>;</div><div class="line">                    flashVersion = <span class="built_in">parseInt</span>(words[i]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">f</span>: hasFlash,</div><div class="line">        <span class="attr">v</span>: flashVersion</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;过年的时候阿里微信的红包大战打的火热，产品也准备蹭个热点，搞了一个活动页，仿阿里的咻一咻。&lt;/p&gt;
&lt;p&gt;声音播放用的是jwplayer,有点杀鸡用牛刀的感觉，没办法，特殊原因必须需要支持Chrome/25.0.1364.172，&lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;如此方便的标签只能看不能用，让我先哭会去。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://idealife.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="jwplayer" scheme="http://idealife.github.io/tags/jwplayer/"/>
    
  </entry>
  
  <entry>
    <title>理解JavaScript中的Null和Undefined</title>
    <link href="http://idealife.github.io/2016/03/26/%E7%90%86%E8%A7%A3JavaScript%E4%B8%AD%E7%9A%84Null%E5%92%8CUndefined/"/>
    <id>http://idealife.github.io/2016/03/26/理解JavaScript中的Null和Undefined/</id>
    <published>2016-03-26T04:07:53.000Z</published>
    <updated>2017-07-16T09:44:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>当我们进行 null == undefined 的判断时，发现返回的结果是true。<br>因为JS标准规范定义:</p><blockquote><p>If x is null and y is undefined, return true。</p></blockquote><p>所以可以通过 var a;  if (a == null){} 判断对象是否为空。<br><a id="more"></a><br>关于undefined:</p><p>1、如果变量未做任何定义，就直接使用的话，则会报错。<br>if (b){}; //代码报错<code>Uncaught ReferenceError: b is not defined at &lt;anonymous&gt;:1:1</code></p><p>或者只声明了参数，没有进行赋值。访问其不存在的属性时则会出现这样的报错：<code>Uncaught TypeError: Cannot read property &#39;name&#39; of undefined at &lt;anonymous&gt;:1:21</code>。因为在赋值之前，定义的变量会被初始为undefined。</p><p>2、定义了对象，但是使用的属性还没有定义，<br>如<code>var c ={}; console.log(c.name)</code>. 输出为undefined。</p><p>JS中的5钟基本类型</p><p>可以通过Object的toString()方法获取。<br>1、Object.prototype.toString.call(null);<br>“[object Null]”<br>2、Object.prototype.toString.call(undefined);<br>“[object Undefined]”<br>3、Object.prototype.toString.call(true);<br>“[object Boolean]”<br>4、Object.prototype.toString.call(10086);<br>“[object Number]”<br>5、Object.prototype.toString.call(‘Hello JavaScript’);<br>“[object String]”</p><p>如果是对象的话，则如下：</p><p>var obj ={}; obj.toString()<br>“[object Object]”</p><p>另外typeof方法也可以获取对应的类型<br><img src="/img/201603/2-1.png" alt="图片"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当我们进行 null == undefined 的判断时，发现返回的结果是true。&lt;br&gt;因为JS标准规范定义:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If x is null and y is undefined, return true。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以可以通过 var a;  if (a == null){} 判断对象是否为空。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://idealife.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://idealife.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>一张图看懂JavaScript正则</title>
    <link href="http://idealife.github.io/2016/03/16/%E4%B8%80%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82JavaScript%E6%AD%A3%E5%88%99/"/>
    <id>http://idealife.github.io/2016/03/16/一张图看懂JavaScript正则/</id>
    <published>2016-03-16T07:47:28.000Z</published>
    <updated>2017-07-16T08:03:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>网上看到的图片，千言万语都在其中。<br>不多说了，直接上图</p><a id="more"></a><p><img src="/img/201603/1-1.png" alt="正则整理"></p><p>备忘：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">var str = "name is &#123;&#123;name&#125;&#125;, age is &#123;&#123;age&#125;&#125;";</div><div class="line"></div><div class="line">var reg = /&#123;&#123;[<span class="string">a-zA-Z_</span>][<span class="symbol">a-zA-Z0-9\.</span>]*&#125;&#125;/g;</div><div class="line">console.log(str.match(reg));</div><div class="line"></div><div class="line">var reg2 = /&#123;&#123;[<span class="string">a-zA-Z_</span>][<span class="symbol">a-zA-Z0-9\.</span>]+&#125;&#125;/g;</div><div class="line">console.log(str.match(reg2));</div><div class="line"></div><div class="line">var reg3 = /&#123;&#123;([<span class="string">a-zA-Z_</span>][<span class="symbol">a-zA-Z0-9\.</span>]+)&#125;&#125;/g;//注意这里的小括号位置，用于replace中的分组</div><div class="line">console.log(str.match(reg3));</div><div class="line"></div><div class="line">str.replace(reg3, function(raw, key, offset, string)&#123;</div><div class="line">  console.log(1111, raw, key, offset);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">var reg4 = /&#123;&#123;([a-zA-Z_])([a-zA-Z0-9\.]+)&#125;&#125;/g;//注意这里的小括号于上述位置不同，用于replace中的分组</div><div class="line">str.replace(reg4, function(raw, key,key2, offset, string)&#123;</div><div class="line">  console.log(2222, raw, key, key2, offset);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网上看到的图片，千言万语都在其中。&lt;br&gt;不多说了，直接上图&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://idealife.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://idealife.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Grunt配置的相关备忘</title>
    <link href="http://idealife.github.io/2016/02/03/Grunt%E9%85%8D%E7%BD%AE%E7%9A%84%E7%9B%B8%E5%85%B3%E5%A4%87%E5%BF%98/"/>
    <id>http://idealife.github.io/2016/02/03/Grunt配置的相关备忘/</id>
    <published>2016-02-03T04:29:58.000Z</published>
    <updated>2017-07-16T06:58:18.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="备忘一"><a href="#备忘一" class="headerlink" title="备忘一:"></a>备忘一:</h4><p>路径规则：</p><p>path/to/js/<em>*/</em>.js</p><p>匹配 path/to/js/ 及其子目录下所有的js文件，**匹配path/to/js/的0个或多个子文件夹。</p><h3 id="备忘二"><a href="#备忘二" class="headerlink" title="备忘二:"></a>备忘二:</h3><p>css合并：</p><p>需要插件grunt-contrib-cssmin和grunt-contrib-cssminconcat,通过以下配置进行合并<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">useminPrepare</span>: &#123;</div><div class="line">     <span class="attribute">html</span>: <span class="string">'index.html'</span>,</div><div class="line">    options: &#123;</div><div class="line">        dest: <span class="string">'temp/'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><a id="more"></a><p>效果是将index.html中<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- build:css css/app.css --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"all"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/common/css/base.css"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"all"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/jquery-ui.min.css"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- endbuild --&gt;</span></div></pre></td></tr></table></figure></p><p>生成对应的合并后css，如图：</p><p><img src="/img/201602/1-1.png" alt="图片"></p><p>有build标记的文件替换<br>上述代码合并为<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;link <span class="attribute">rel</span>=<span class="string">"stylesheet"</span> <span class="attribute">href</span>=<span class="string">"css/app.css"</span> <span class="attribute">media</span>=<span class="string">"all”&gt;</span></div></pre></td></tr></table></figure></p><p>则需要通过usemin(需要安装grunt-usemin插件)的配置进行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">usemin: &#123;</div><div class="line">    <span class="attr">html</span>: [<span class="string">'index.html'</span>],</div><div class="line">    <span class="attr">options</span>: &#123;</div><div class="line">        <span class="attr">blockReplacements</span>: &#123;</div><div class="line">            <span class="string">'css'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">block</span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> media = block.media ? <span class="string">' media="'</span> + block.media + <span class="string">'"'</span> : <span class="string">''</span>;</div><div class="line">                <span class="keyword">return</span> <span class="string">'&lt;link rel="stylesheet" href="css/'</span> + block.dest + <span class="string">'"'</span> + media + <span class="string">'/&gt;'</span>;</div><div class="line">            &#125;,</div><div class="line">            <span class="string">'js'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">block</span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> defer = block.defer ? <span class="string">'defer '</span> : <span class="string">''</span>,</div><div class="line">                    <span class="keyword">async</span> = block.async ? <span class="string">'async '</span> : <span class="string">''</span>;</div><div class="line">                <span class="keyword">return</span> <span class="string">'&lt;script '</span> + defer + <span class="keyword">async</span> + <span class="string">'src="css/'</span> + block.dest + <span class="string">'"&gt;&lt;\/script&gt;'</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="备忘三"><a href="#备忘三" class="headerlink" title="备忘三:"></a>备忘三:</h3><p>使用grunt时我们会用到各类插件,有时候一个复杂的项目打包需要很长时间,这个时候我们可以去找一些方法优化,通过插件<code>time-grunt</code>,我们可以了解到每一个步骤的耗时,从而可以改进流程,优化打包速度.<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// Gruntfile.js</div><div class="line">module.exports = grunt =&gt; &#123;</div><div class="line">// require it at the top<span class="built_in"> and </span>pass in the grunt<span class="built_in"> instance</span></div><div class="line">require('time-grunt')(grunt);</div><div class="line"></div><div class="line">grunt.initConfig();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="备忘四"><a href="#备忘四" class="headerlink" title="备忘四:"></a>备忘四:</h3><p>平时在grunt.js中使用插件，都需要如下所示，使用loadNpmTasks预先加载相关的插件，显得特别繁琐和不必要。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">grunt</span><span class="selector-class">.loadNpmTasks</span>(<span class="string">'grunt-usemin'</span>);</div><div class="line"><span class="selector-tag">grunt</span><span class="selector-class">.loadNpmTasks</span>(<span class="string">'grunt-contrib-jshint'</span>);</div><div class="line"><span class="selector-tag">grunt</span><span class="selector-class">.loadNpmTasks</span>(<span class="string">'grunt-contrib-cssmin'</span>);</div></pre></td></tr></table></figure></p><p>使用<code>load-grunt-tasks</code>插件就能减少上述不必要的代码,package.json文件中的dependencies/devDependencies/peerDependencies 字段内指定的插件都会被加载。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Gruntfile.js </span></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">grunt</span> =&gt;</span> &#123;</div><div class="line">    <span class="comment">// load all grunt tasks matching the ['grunt-*', '@*/grunt-*'] patterns </span></div><div class="line">    <span class="built_in">require</span>(<span class="string">'load-grunt-tasks'</span>)(grunt);</div><div class="line"> </div><div class="line">    grunt.initConfig(&#123;&#125;);</div><div class="line">    grunt.registerTask(<span class="string">'default'</span>, []);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;备忘一&quot;&gt;&lt;a href=&quot;#备忘一&quot; class=&quot;headerlink&quot; title=&quot;备忘一:&quot;&gt;&lt;/a&gt;备忘一:&lt;/h4&gt;&lt;p&gt;路径规则：&lt;/p&gt;
&lt;p&gt;path/to/js/&lt;em&gt;*/&lt;/em&gt;.js&lt;/p&gt;
&lt;p&gt;匹配 path/to/js/ 及其子目录下所有的js文件，**匹配path/to/js/的0个或多个子文件夹。&lt;/p&gt;
&lt;h3 id=&quot;备忘二&quot;&gt;&lt;a href=&quot;#备忘二&quot; class=&quot;headerlink&quot; title=&quot;备忘二:&quot;&gt;&lt;/a&gt;备忘二:&lt;/h3&gt;&lt;p&gt;css合并：&lt;/p&gt;
&lt;p&gt;需要插件grunt-contrib-cssmin和grunt-contrib-cssminconcat,通过以下配置进行合并&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;useminPrepare&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;attribute&quot;&gt;html&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;index.html&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    options: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        dest: &lt;span class=&quot;string&quot;&gt;&#39;temp/&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://idealife.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Grunt" scheme="http://idealife.github.io/tags/Grunt/"/>
    
  </entry>
  
  <entry>
    <title>Node.js的模块加载顺序</title>
    <link href="http://idealife.github.io/2016/01/19/Node-js%E7%9A%84%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F/"/>
    <id>http://idealife.github.io/2016/01/19/Node-js的模块加载顺序/</id>
    <published>2016-01-19T14:54:23.000Z</published>
    <updated>2017-07-16T06:58:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>Node.js的模块的载入及缓存机制如下：<br>1）载入内置模块（A Core Module）<br>2）载入文件模块（A File Module）<br>3）载入文件目录模块（A Folder Module）<br>4）载入node_modules里的模块<br>5）自动缓存已载入模块。</p><p>如果模块名不是路径，也不是内置模块，Node将试图去当前目录的node_modules文件夹里搜索。如果当前目录的node_modules里没有找到，Node会从父目录的node_modules里搜索，这样递归下去直到根目录。<br>可以在项目目录下使用 node 命令（已在路径<code>C:\Users\xxx&gt;</code>为例），然后输入 global.module.paths查看Node.js加载node_modules模块的顺序。<br><a id="more"></a><br><img src="/img/201601/1-1.png" alt="路径"></p><p>这里重点说明一下require载入文件模块和文件目录模块的相关机制：</p><p>1、优先载入文件模块，一般使用的是相对路径（也可以用绝对路径），如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myMod = <span class="built_in">require</span>(<span class="string">'./my_mod'</span>)  <span class="comment">//js的后缀可以省略</span></div></pre></td></tr></table></figure></p><p>2、当对应文件没找到的时候，开始找文件夹。Node将搜索整个my_mod目录，Node会假设my_mod为一个包并试图找到包定义文件package.json。如果my_mod目录里没有包含package.json文件，Node会假设默认主文件为index.js，即会加载index.js。如果index.js也不存在，那么加载将失败。如果有package.json，则会找package.json中<code>main</code>属性对应的值，如：<code>&quot;main&quot;: &quot;mod.js</code></p><h4 id="额外再讲点npm–save-–save-dev的区别"><a href="#额外再讲点npm–save-–save-dev的区别" class="headerlink" title="额外再讲点npm–save –save-dev的区别"></a>额外再讲点npm–save –save-dev的区别</h4><p>-save和save-dev可以省掉你手动修改package.json文件的步骤。</p><p>npm install module-name -save 自动把模块和版本号添加到dependencies部分，</p><p>npm install module-name -save-dev 自动把模块和版本号添加到devdependencies部分。</p><p>至于配置文件区分这俩部分， 是用于区别开发依赖模块和产品依赖模块，再做单个module的时候可能体验不到两者的差异。</p><p>但当前模块A变成其他模块的依赖，在其他模块的主目录中执行npm install 时，只会下载A的dependencies下的依赖。如果此时进入到这个A模块的主目录中，执行npm install时，才会把devdependencies的依赖下载下来，方便你对A模块进行调试相关的工作。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Node.js的模块的载入及缓存机制如下：&lt;br&gt;1）载入内置模块（A Core Module）&lt;br&gt;2）载入文件模块（A File Module）&lt;br&gt;3）载入文件目录模块（A Folder Module）&lt;br&gt;4）载入node_modules里的模块&lt;br&gt;5）自动缓存已载入模块。&lt;/p&gt;
&lt;p&gt;如果模块名不是路径，也不是内置模块，Node将试图去当前目录的node_modules文件夹里搜索。如果当前目录的node_modules里没有找到，Node会从父目录的node_modules里搜索，这样递归下去直到根目录。&lt;br&gt;可以在项目目录下使用 node 命令（已在路径&lt;code&gt;C:\Users\xxx&amp;gt;&lt;/code&gt;为例），然后输入 global.module.paths查看Node.js加载node_modules模块的顺序。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://idealife.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="NodeJs" scheme="http://idealife.github.io/tags/NodeJs/"/>
    
  </entry>
  
  <entry>
    <title>跨域问题</title>
    <link href="http://idealife.github.io/2015/12/22/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <id>http://idealife.github.io/2015/12/22/跨域问题/</id>
    <published>2015-12-22T06:46:02.000Z</published>
    <updated>2017-07-16T06:58:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天需要做一个本地测试，html中的js涉及通过ajax跨域拉取数据的问题，在Chrome中的控制台报错：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">XMLHttpRequest cannot <span class="keyword">load</span> <span class="keyword">http</span>://www.xxxx.com/<span class="keyword">Data</span>/GetUserInfo. <span class="keyword">No</span><span class="string">'Access-Control-Allow-Origin'</span> header <span class="keyword">is</span> <span class="keyword">present</span> <span class="keyword">on</span> the requested resource. Origin <span class="string">'null'</span><span class="keyword">is</span> therefore <span class="keyword">not</span> allowed access.</div></pre></td></tr></table></figure></p><a id="more"></a><p>有一个便捷的处理方式可以在谷歌中实现数据跨域，只需要 简单在浏览器的快捷方式的设置中 增加运行参数   –disable-web-security即可<br><img src="/img/201512/2-1.png" alt="设置方式"></p><h4 id="相关资料："><a href="#相关资料：" class="headerlink" title="相关资料："></a>相关资料：</h4><p><a href="http://www.360doc.com/content/14/0106/11/15643_343005039.shtml" target="_blank" rel="external">CORS（跨域资源共享）</a></p><p><a href="http://huaidan.org/archives/2729.html" target="_blank" rel="external">新W3C标准中 AJAX 跨域实现以及隐患</a></p><p><a href="http://technet.microsoft.com/zh-cn/sqlserver/e36ceae6-ff36-4a1b-9895-75f0eacfe94c" target="_blank" rel="external">跨域访问资源</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天需要做一个本地测试，html中的js涉及通过ajax跨域拉取数据的问题，在Chrome中的控制台报错：&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;XMLHttpRequest cannot &lt;span class=&quot;keyword&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;http&lt;/span&gt;://www.xxxx.com/&lt;span class=&quot;keyword&quot;&gt;Data&lt;/span&gt;/GetUserInfo. &lt;span class=&quot;keyword&quot;&gt;No&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&#39;Access-Control-Allow-Origin&#39;&lt;/span&gt; header &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;present&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; the requested resource. Origin &lt;span class=&quot;string&quot;&gt;&#39;null&#39;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; therefore &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; allowed access.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://idealife.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="跨域" scheme="http://idealife.github.io/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>关于 CommonJS AMD CMD</title>
    <link href="http://idealife.github.io/2015/12/21/%E5%85%B3%E4%BA%8E-CommonJS-AMD-CMD/"/>
    <id>http://idealife.github.io/2015/12/21/关于-CommonJS-AMD-CMD/</id>
    <published>2015-12-21T05:52:23.000Z</published>
    <updated>2017-07-16T06:58:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h3><p>CommonJs 是服务器端模块的规范，Node.js采用了这个规范。</p><p>根据CommonJS规范，一个单独的文件就是一个模块。加载模块使用require方法，该方法读取一个文件并执行，最后返回文件内部的exports对象。</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//私有变量</span></div><div class="line"><span class="keyword">var</span> test = <span class="number">123</span>;</div><div class="line"></div><div class="line"><span class="comment">//公有方法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foobar</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// do someing ...</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.bar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">//do someing ...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//exports对象上的方法和变量是公有的</span></div><div class="line"><span class="keyword">var</span> foobar = <span class="keyword">new</span> foobar();</div><div class="line">exports.foobar = foobar;</div><div class="line">-----------------</div><div class="line"><span class="comment">//require方法默认读取js文件，所以可以省略js后缀</span></div><div class="line"><span class="keyword">var</span> test = <span class="built_in">require</span>(<span class="string">'./foobar'</span>).foobar;</div><div class="line"></div><div class="line">test.bar();</div></pre></td></tr></table></figure><p>CommonJS 加载模块是同步的，所以只有加载完成才能执行后面的操作。像Node.js主要用于服务器的编程，加载的模块文件一般都已经存在本地硬盘，所以加载起来比较快，不用考虑异步加载的方式，所以CommonJS规范比较适用。但如果是浏览器环境，要从服务器加载模块，这是就必须采用异步模式。所以就有了 AMD  CMD 解决方案。</p><h3 id="AMD-Asynchromous-Module-Definition"><a href="#AMD-Asynchromous-Module-Definition" class="headerlink" title="AMD((Asynchromous Module Definition)"></a>AMD((Asynchromous Module Definition)</h3><p>AMD 是 RequireJS 在推广过程中对模块定义的规范化产出</p><p>AMD异步加载模块。它的模块支持对象 函数 构造器 字符串 JSON等各种类型的模块。</p><p>适用AMD规范适用define方法定义模块。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//通过数组引入依赖 ，回调函数通过形参传入依赖</span></div><div class="line">define([<span class="string">'someModule1'</span>, ‘someModule2’], <span class="function"><span class="keyword">function</span> <span class="params">(someModule1, someModule2)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span> <span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">/// someing</span></div><div class="line">        someModule1.test();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;foo: foo&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><p>CMD是SeaJS 在推广过程中对模块定义的规范化产出</p><p>CMD和AMD的区别有以下几点：</p><p>1.对于依赖的模块AMD是提前执行，CMD是延迟执行。不过RequireJS从2.0开始，也改成可以延迟执行（根据写法不同，处理方式不通过）。</p><p>2.CMD推崇依赖就近，AMD推崇依赖前置。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//AMD</span></div><div class="line">define([<span class="string">'./a'</span>,<span class="string">'./b'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//依赖一开始就写好</span></div><div class="line">    a.test();</div><div class="line">    b.test();</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//CMD</span></div><div class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">requie, exports, module</span>) </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//依赖可以就近书写</span></div><div class="line">    <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>);</div><div class="line">    a.test();</div><div class="line">    </div><div class="line">    ...</div><div class="line">    <span class="comment">//软依赖</span></div><div class="line">    <span class="keyword">if</span> (status) &#123;</div><div class="line">    </div><div class="line">        <span class="keyword">var</span> b = requie(<span class="string">'./b'</span>);</div><div class="line">        b.test();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>虽然 AMD也支持CMD写法，但依赖前置是官方文档的默认模块定义写法。</p><p>3.AMD的api默认是一个当多个用，CMD严格的区分推崇职责单一。例如：AMD里require分全局的和局部的。CMD里面没有全局的 require,提供 seajs.use()来实现模块系统的加载启动。CMD里每个API都简单纯粹。</p><blockquote><p><a href="https://my.oschina.net/felumanman/blog/263330?p=1" target="_blank" rel="external">引自奥巴码侬</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;CommonJS&quot;&gt;&lt;a href=&quot;#CommonJS&quot; class=&quot;headerlink&quot; title=&quot;CommonJS&quot;&gt;&lt;/a&gt;CommonJS&lt;/h3&gt;&lt;p&gt;CommonJs 是服务器端模块的规范，Node.js采用了这个规范。&lt;/p&gt;
&lt;p&gt;根据CommonJS规范，一个单独的文件就是一个模块。加载模块使用require方法，该方法读取一个文件并执行，最后返回文件内部的exports对象。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://idealife.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>NSTableView的content mode的一些对比</title>
    <link href="http://idealife.github.io/2015/12/01/NSTableView%E7%9A%84content-mode%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AF%B9%E6%AF%94/"/>
    <id>http://idealife.github.io/2015/12/01/NSTableView的content-mode的一些对比/</id>
    <published>2015-12-01T03:11:28.000Z</published>
    <updated>2017-07-16T06:58:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>content mode 分为cell-based和view-based两种模式，他们之间有什么区别呢？</p><p>先上<a href="https://developer.apple.com/library/mac/samplecode/TableViewPlayground/Introduction/Intro.html" target="_blank" rel="external">Demo</a></p><p>WWDC上的相关文档<a href="http://adcdownload.apple.com/wwdc_2011/adc_on_itunes__wwdc11_sessions__pdf/120_view_based_tableview.pdf" target="_blank" rel="external">view_based_tableview</a>,<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/TableView/TableViewOverview/TableViewOverview.html" target="_blank" rel="external">TableViewOverview</a></p><p>关于这两者的区别，cell-based是更早期的做法，简单高效，但是随着技术的发展，需要更多更炫的效果，就诞生了view-based.苹果是建议使用view-based模式的。下面是官方的说法：</p><a id="more"></a><p>In addition to following description I would suggest you to go through<a href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/TableView/Introduction/Introduction.html" target="_blank" rel="external">http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/TableView/Introduction/Introduction.html</a></p><p>In OS X version 10.6 and earlier each individual cell within a table view was required to be a subclass of NSCell. This approach has caused limitations when designing complex custom cells, typically requiring the developer to write their own NSCell subclass. Additionally, providing animation, such as progress views, was extremely difficult.</p><p>In OS X version 10.7 table views have been redesigned and now support using views as individual cells. These are referred to as view-based table views. View-based table views allow you to design custom cells in the Interface Builder portion of Xcode 4.0. It allows easy design time layout as well as making it easy to animate changes and customize drawing. As with cell-based table views, view-based table views support selection, column dragging, and other user-expected table view behavior. The only difference is that the developer is given much more flexibility in design and implementation.</p><p>Creating view-based and cell-based table views and adding columns use the same techniques within Interface Builder. The differences occur in your application code when providing the individual cells, populating the content of the table view, and customizing the table view appearance. As well, the Cocoa bindings techniques are entirely different between the two implementations.</p><p>A cell can contain only one UI element like a text cell, image view cell, button cell and a few more. The customization ability is quite poor.</p><p>A view can contain multiple UI elements as well as other views. The customization ability is almost infinite.</p><p>Apple recommends to use always view based table views</p><p>另外cell-based可以有列选中的效果，view-based则没这个效果。<br><img src="/img/201512/1-1.png" alt="cell-based"><br><img src="/img/201512/1-2.png" alt="view-based"></p><p>代码中要改变conntent mode,则需要<br>改变table的datasouredelegate才行了。</p><p>嗯，一个delegate专门负责cell相关的委托实现 一个专门负责view的委托实现。<br>Cell-based对应的是 tableView:objectValueForTableColumn:row:，而view-based NSTableView 对应的则是 tableView:viewForTableColumn:row:.<br>感觉苹果这个设计的有点繁琐，界面中有设置的地方，纯代码竟然要通过这种方式制定。可能是为了结构更加独立，减少相互之间的干扰。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;content mode 分为cell-based和view-based两种模式，他们之间有什么区别呢？&lt;/p&gt;
&lt;p&gt;先上&lt;a href=&quot;https://developer.apple.com/library/mac/samplecode/TableViewPlayground/Introduction/Intro.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WWDC上的相关文档&lt;a href=&quot;http://adcdownload.apple.com/wwdc_2011/adc_on_itunes__wwdc11_sessions__pdf/120_view_based_tableview.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view_based_tableview&lt;/a&gt;,&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/TableView/TableViewOverview/TableViewOverview.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TableViewOverview&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关于这两者的区别，cell-based是更早期的做法，简单高效，但是随着技术的发展，需要更多更炫的效果，就诞生了view-based.苹果是建议使用view-based模式的。下面是官方的说法：&lt;/p&gt;
    
    </summary>
    
      <category term="iDev" scheme="http://idealife.github.io/categories/iDev/"/>
    
    
  </entry>
  
  <entry>
    <title>NSToolbar的使用</title>
    <link href="http://idealife.github.io/2015/11/18/NSToolbar%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://idealife.github.io/2015/11/18/NSToolbar的使用/</id>
    <published>2015-11-18T07:03:17.000Z</published>
    <updated>2017-06-29T14:27:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>1、<a href="https://developer.apple.com/library/mac/samplecode/ToolbarSample/Introduction/Intro.html#//apple_ref/doc/uid/DTS10000413" target="_blank" rel="external">NSToolbar的官网demo地址</a><br>2、<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/Toolbars/Toolbars.pdf" target="_blank" rel="external">官方PDF资料</a></p><a id="more"></a><p>特别要注意的是，由于上面的两份资料年代久远，有一些功能在新的OSX SDK已经被弃用了，如Toolbar Separator 和Customize items。<br><img src="/img/201511/3_1.png" alt="图片"></p><p>下面讲解已打印功能讲一下NSToolbar使用中要注意的地方<br>首先要实现NSToolbarDelegate中的方法，是Item可用<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//--------------------------------------------------------------------------------------------------</span></div><div class="line"><span class="comment">// We don't do anything useful here (and we don't really have to implement this method) but you could</span></div><div class="line"><span class="comment">// if you wanted to. If, however, you want to have validation checks on your standard NSToolbarItems</span></div><div class="line"><span class="comment">// (with images) and have inactive ones grayed out, then this is the method for you.</span></div><div class="line"><span class="comment">// It isn't called for custom NSToolbarItems (with custom views); you'd have to override -validate:</span></div><div class="line"><span class="comment">// (see NSToolbarItem.h for a discussion) to get it to do so if you wanted it to.</span></div><div class="line"><span class="comment">// If you don't implement this method, the NSToolbarItems are enabled by default.</span></div><div class="line"><span class="comment">//--------------------------------------------------------------------------------------------------</span></div><div class="line">-(<span class="built_in">BOOL</span>)validateToolbarItem:(<span class="built_in">NSToolbarItem</span> *)toolbarItem</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>因为NSToolbarPrintItem是系统已经定义好了的，所以需要在toolbarWillAddItem自定义我们需要的实现。对于PrintItem而言如果不设置setTarget或者setAction的话，它是回一直处在不可用的状态的。不设置Target，则validateToolbarItem好像是不会进入的（我目前的程序中是这样的，但是demo中，把下面的代码注释掉，PrintItem也一直是可用的。这部分还需要探索一下）。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//--------------------------------------------------------------------------------------------------</span></div><div class="line"><span class="comment">// This is an optional delegate method, called when a new item is about to be added to the toolbar.</span></div><div class="line"><span class="comment">// This is a good spot to set up initial state information for toolbar items, particularly ones</span></div><div class="line"><span class="comment">// that you don't directly control yourself (like with NSToolbarPrintItemIdentifier here).</span></div><div class="line"><span class="comment">// The notification's object is the toolbar, and the @"item" key in the userInfo is the toolbar item</span></div><div class="line"><span class="comment">// being added.</span></div><div class="line"></div><div class="line"><span class="comment">//--------------------------------------------------------------------------------------------------</span></div><div class="line">- (<span class="keyword">void</span>)<span class="string">toolbarWillAddItem:</span>(NSNotification *)notif</div><div class="line">&#123;</div><div class="line">    NSToolbarItem *addedItem = [[notif userInfo] <span class="string">objectForKey:</span>@<span class="string">"item"</span>];</div><div class="line">    </div><div class="line">    <span class="comment">// Is this the printing toolbar item?  If so, then we want to redirect it's action to ourselves</span></div><div class="line">    <span class="comment">// so we can handle the printing properly; hence, we give it a new target.</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="keyword">if</span> ([[addedItem itemIdentifier] <span class="string">isEqual:</span> NSToolbarPrintItemIdentifier])</div><div class="line">    &#123;</div><div class="line">        <span class="comment">//[addedItem setToolTip:@"Print your document"];</span></div><div class="line">        [addedItem <span class="string">setTarget:</span>self];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>实现打印方法.也可以通过上面setAction重新定义打印的具体实现代码。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//--------------------------------------------------------------------------------------------------</span></div><div class="line"><span class="comment">// The NSToolbarPrintItem NSToolbarItem will sent the -printDocument: message to its target.</span></div><div class="line"><span class="comment">// Since we wired its target to be ourselves in -toolbarWillAddItem:, we get called here when</span></div><div class="line"><span class="comment">// the user tries to print by clicking the toolbar item.</span></div><div class="line"><span class="comment">//--------------------------------------------------------------------------------------------------</span></div><div class="line">- (<span class="keyword">void</span>)printDocument:(<span class="keyword">id</span>)sender</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSPrintOperation</span> *printOperation = [<span class="built_in">NSPrintOperation</span> printOperationWithView: [<span class="keyword">self</span>.mainContentView window].contentView];</div><div class="line">    [printOperation runOperationModalForWindow: [<span class="keyword">self</span>.mainContentView window] delegate:<span class="literal">nil</span> didRunSelector:<span class="literal">nil</span> contextInfo:<span class="literal">nil</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>最终效果<br><img src="/img/201511/3_2.png" alt="图片"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、&lt;a href=&quot;https://developer.apple.com/library/mac/samplecode/ToolbarSample/Introduction/Intro.html#//apple_ref/doc/uid/DTS10000413&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NSToolbar的官网demo地址&lt;/a&gt;&lt;br&gt;2、&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/Toolbars/Toolbars.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方PDF资料&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iDev" scheme="http://idealife.github.io/categories/iDev/"/>
    
    
      <category term="Xcode" scheme="http://idealife.github.io/tags/Xcode/"/>
    
      <category term="Xib" scheme="http://idealife.github.io/tags/Xib/"/>
    
  </entry>
  
  <entry>
    <title>Xcode程序本地化设置</title>
    <link href="http://idealife.github.io/2015/11/18/Xcode%E7%A8%8B%E5%BA%8F%E6%9C%AC%E5%9C%B0%E5%8C%96%E8%AE%BE%E7%BD%AE/"/>
    <id>http://idealife.github.io/2015/11/18/Xcode程序本地化设置/</id>
    <published>2015-11-18T06:37:44.000Z</published>
    <updated>2017-06-29T14:30:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于Xcode中实现程序的本地化花了点时间做了简单地了解。<br>首先Xcode中实现本地化有两种机制：</p><h4 id="一种是Use-Base-Internationalization"><a href="#一种是Use-Base-Internationalization" class="headerlink" title="一种是Use Base Internationalization"></a>一种是Use Base Internationalization</h4><h4 id="另一种则是不用"><a href="#另一种则是不用" class="headerlink" title="另一种则是不用"></a>另一种则是不用</h4><p>前者是后来苹果改进后的做法，所以现在创建的默认程序都是用的Use Base Internationalization的方法，官网中老的demo则都是第二种方式。两者相结合使用，则会更灵活地实现需要的效果。<br>两则的区别是Use Base Internationalization后，会创建Base.lproj的文件夹，然后把相关的xib文件都放到里面。而翻译的内容则会放到对应语言的lproj文件夹中，如英语，则在en.lproj文件夹中又对应xib的strings文件，只要在这里面做对应的翻译即可。<br>而第二种方式，更直接，但是会更占空间，对应语言的文件夹(如en.lproj)中将会多出一份在Base.lproj文件夹中的xib的copy，所有的翻译都在xib上进行即可。（也可以重新调整界面）<br><a id="more"></a></p><h3 id="设置方式"><a href="#设置方式" class="headerlink" title="设置方式"></a>设置方式</h3><p>在工程的info中，Localizations节点下的Use Base Internationalization即可选择本地化的方式。要实现更多语言的本地化，则在Language中添加即可。如下图。添加后，在xib的File inspector中的Localization中就多出刚增加的语言。也能定制当前xib的本地方方式。如图二，Localizable Stirngs可以单独设置为Interface Builder Cocoa XIB,就被配置成了第二种本地化方式。<br><img src="/img/201511/4_1.png" alt="图一"><br>图二：<br><img src="/img/201511/4_2.png" alt="图二"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于Xcode中实现程序的本地化花了点时间做了简单地了解。&lt;br&gt;首先Xcode中实现本地化有两种机制：&lt;/p&gt;
&lt;h4 id=&quot;一种是Use-Base-Internationalization&quot;&gt;&lt;a href=&quot;#一种是Use-Base-Internationalization&quot; class=&quot;headerlink&quot; title=&quot;一种是Use Base Internationalization&quot;&gt;&lt;/a&gt;一种是Use Base Internationalization&lt;/h4&gt;&lt;h4 id=&quot;另一种则是不用&quot;&gt;&lt;a href=&quot;#另一种则是不用&quot; class=&quot;headerlink&quot; title=&quot;另一种则是不用&quot;&gt;&lt;/a&gt;另一种则是不用&lt;/h4&gt;&lt;p&gt;前者是后来苹果改进后的做法，所以现在创建的默认程序都是用的Use Base Internationalization的方法，官网中老的demo则都是第二种方式。两者相结合使用，则会更灵活地实现需要的效果。&lt;br&gt;两则的区别是Use Base Internationalization后，会创建Base.lproj的文件夹，然后把相关的xib文件都放到里面。而翻译的内容则会放到对应语言的lproj文件夹中，如英语，则在en.lproj文件夹中又对应xib的strings文件，只要在这里面做对应的翻译即可。&lt;br&gt;而第二种方式，更直接，但是会更占空间，对应语言的文件夹(如en.lproj)中将会多出一份在Base.lproj文件夹中的xib的copy，所有的翻译都在xib上进行即可。（也可以重新调整界面）&lt;br&gt;
    
    </summary>
    
      <category term="iDev" scheme="http://idealife.github.io/categories/iDev/"/>
    
    
      <category term="Xcode" scheme="http://idealife.github.io/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>MacOS App手动签名打包方法</title>
    <link href="http://idealife.github.io/2015/11/18/MacOS-App%E6%89%8B%E5%8A%A8%E7%AD%BE%E5%90%8D%E6%89%93%E5%8C%85%E6%96%B9%E6%B3%95/"/>
    <id>http://idealife.github.io/2015/11/18/MacOS-App手动签名打包方法/</id>
    <published>2015-11-18T06:09:16.000Z</published>
    <updated>2017-09-09T09:13:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>用了跨平台的方案开发App，自然享受不到苹果亲儿子XCode开发带来的便利。<br>比如打包发布等一系列的操作需要我们手工来操作了。</p><p>苹果的安全性与隐私中对于程序分成3类：</p><p>1、Mac App Store;</p><p>2、Mac App Store和被认可的开发者;</p><p>3、任何来源。</p><p>一般用户的设置都是1或2,选3的话安全性就很难保证了。</p><p>针对第1,2种的App, 苹果的证书对应分为2类，一个类Developer开头的开发者证书，一类是3rd开头的App Store发布证书。</p><p>如果不准备上架，或者使用了苹果的私有Api，那么就只能使用开发者证书给App签名了。<br><a id="more"></a><br>签名方式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="comment">#  Script.sh</span></div><div class="line"><span class="comment">#  sign</span></div><div class="line"></div><div class="line">path=$(<span class="built_in">cd</span> <span class="string">"<span class="variable">$(dirname "$0")</span>"</span>;<span class="built_in">pwd</span>)</div><div class="line"><span class="built_in">echo</span> <span class="variable">$path</span></div><div class="line"><span class="built_in">cd</span> <span class="variable">$path</span></div><div class="line"></div><div class="line">codesign -f -s <span class="string">"Developer ID Application: Shanghai XXX Limited (88B8QAXTFE)"</span> -v --deep <span class="string">"XXX.app"</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> -n <span class="string">"检查签名？（y/n）"</span></div><div class="line"></div><div class="line"><span class="built_in">read</span> is_sign</div><div class="line"></div><div class="line"><span class="keyword">if</span> [[ <span class="variable">$is_sign</span>  = <span class="string">"y"</span> ]]; <span class="keyword">then</span></div><div class="line">  spctl --verbose=4 --assess --<span class="built_in">type</span> execute XXX.app</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure></p><p>针对上架App Store的方案,需要编写entitlements文件，设置沙盒和访问权限。然后打包成pkg，通过Application Loader上传给Store审核，通过通过后就能对外发布了。</p><p>签名方式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="comment">#  Script.sh</span></div><div class="line"><span class="comment">#  sign</span></div><div class="line"></div><div class="line">path=$(<span class="built_in">cd</span> <span class="string">"<span class="variable">$(dirname "$0")</span>"</span>;<span class="built_in">pwd</span>)</div><div class="line"><span class="built_in">echo</span> <span class="variable">$path</span></div><div class="line"><span class="built_in">cd</span> <span class="variable">$path</span></div><div class="line"></div><div class="line">codesign --deep --force --verify --verbose --sign <span class="string">"3rd Party Mac Developer Application: Shanghai XXX Limited (88B8QAXTFE)"</span> --entitlements XXX.entitlements XXX.app</div><div class="line"></div><div class="line"><span class="built_in">echo</span> -n <span class="string">"检查签名？（y/n）"</span></div><div class="line"></div><div class="line"><span class="built_in">read</span> is_sign</div><div class="line"></div><div class="line"><span class="keyword">if</span> [[ <span class="variable">$is_sign</span>  = <span class="string">"y"</span> ]]; <span class="keyword">then</span></div><div class="line">  spctl --verbose=4 --assess --<span class="built_in">type</span> execute XXX.app</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"></div><div class="line">productbuild --component XXX.app /Applications XXX.pkg --sign <span class="string">"3rd Party Mac Developer Installer: Shanghai XXX Limited (88B8QAXTFE)"</span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用了跨平台的方案开发App，自然享受不到苹果亲儿子XCode开发带来的便利。&lt;br&gt;比如打包发布等一系列的操作需要我们手工来操作了。&lt;/p&gt;
&lt;p&gt;苹果的安全性与隐私中对于程序分成3类：&lt;/p&gt;
&lt;p&gt;1、Mac App Store;&lt;/p&gt;
&lt;p&gt;2、Mac App Store和被认可的开发者;&lt;/p&gt;
&lt;p&gt;3、任何来源。&lt;/p&gt;
&lt;p&gt;一般用户的设置都是1或2,选3的话安全性就很难保证了。&lt;/p&gt;
&lt;p&gt;针对第1,2种的App, 苹果的证书对应分为2类，一个类Developer开头的开发者证书，一类是3rd开头的App Store发布证书。&lt;/p&gt;
&lt;p&gt;如果不准备上架，或者使用了苹果的私有Api，那么就只能使用开发者证书给App签名了。&lt;br&gt;
    
    </summary>
    
      <category term="iDev" scheme="http://idealife.github.io/categories/iDev/"/>
    
    
  </entry>
  
</feed>
